/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommentActionResponseDto } from '../models';
// @ts-ignore
import { CommentsListResponseDto } from '../models';
// @ts-ignore
import { CreateCommentDto } from '../models';
// @ts-ignore
import { FlagBlogDto } from '../models';
// @ts-ignore
import { UpdateCommentDto } from '../models';
/**
 * BlogCommentsApi - axios parameter creator
 * @export
 */
export const BlogCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new comment on a blog post
         * @summary Create a new comment
         * @param {string} blogSlug Blog slug
         * @param {CreateCommentDto} createCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerCreateComment: async (blogSlug: string, createCommentDto: CreateCommentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerCreateComment', 'blogSlug', blogSlug)
            // verify required parameter 'createCommentDto' is not null or undefined
            assertParamExists('blogCommentsControllerCreateComment', 'createCommentDto', createCommentDto)
            const localVarPath = `/api/blogs/{blogSlug}/comments`
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing comment
         * @summary Delete a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerDeleteComment: async (commentId: string, blogSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('blogCommentsControllerDeleteComment', 'commentId', commentId)
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerDeleteComment', 'blogSlug', blogSlug)
            const localVarPath = `/api/blogs/{blogSlug}/comments/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flag a comment for moderation review
         * @summary Flag a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {FlagBlogDto} flagBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerFlagComment: async (commentId: string, blogSlug: string, flagBlogDto: FlagBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('blogCommentsControllerFlagComment', 'commentId', commentId)
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerFlagComment', 'blogSlug', blogSlug)
            // verify required parameter 'flagBlogDto' is not null or undefined
            assertParamExists('blogCommentsControllerFlagComment', 'flagBlogDto', flagBlogDto)
            const localVarPath = `/api/blogs/{blogSlug}/comments/{commentId}/flag`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flagBlogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get paginated comments for a specific blog
         * @summary Get blog comments
         * @param {string} blogSlug Blog slug
         * @param {string} page 
         * @param {string} limit 
         * @param {string} sort 
         * @param {string} parentId 
         * @param {string} userSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerGetComments: async (blogSlug: string, page: string, limit: string, sort: string, parentId: string, userSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerGetComments', 'blogSlug', blogSlug)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('blogCommentsControllerGetComments', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('blogCommentsControllerGetComments', 'limit', limit)
            // verify required parameter 'sort' is not null or undefined
            assertParamExists('blogCommentsControllerGetComments', 'sort', sort)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('blogCommentsControllerGetComments', 'parentId', parentId)
            // verify required parameter 'userSlug' is not null or undefined
            assertParamExists('blogCommentsControllerGetComments', 'userSlug', userSlug)
            const localVarPath = `/api/blogs/{blogSlug}/comments`
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (userSlug !== undefined) {
                localVarQueryParameter['userSlug'] = userSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a like to a comment
         * @summary Like a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerLikeComment: async (commentId: string, blogSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('blogCommentsControllerLikeComment', 'commentId', commentId)
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerLikeComment', 'blogSlug', blogSlug)
            const localVarPath = `/api/blogs/{blogSlug}/comments/{commentId}/like`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a like from a comment
         * @summary Unlike a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerUnlikeComment: async (commentId: string, blogSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('blogCommentsControllerUnlikeComment', 'commentId', commentId)
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerUnlikeComment', 'blogSlug', blogSlug)
            const localVarPath = `/api/blogs/{blogSlug}/comments/{commentId}/unlike`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing comment
         * @summary Update a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {UpdateCommentDto} updateCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerUpdateComment: async (commentId: string, blogSlug: string, updateCommentDto: UpdateCommentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('blogCommentsControllerUpdateComment', 'commentId', commentId)
            // verify required parameter 'blogSlug' is not null or undefined
            assertParamExists('blogCommentsControllerUpdateComment', 'blogSlug', blogSlug)
            // verify required parameter 'updateCommentDto' is not null or undefined
            assertParamExists('blogCommentsControllerUpdateComment', 'updateCommentDto', updateCommentDto)
            const localVarPath = `/api/blogs/{blogSlug}/comments/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"blogSlug"}}`, encodeURIComponent(String(blogSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCommentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogCommentsApi - functional programming interface
 * @export
 */
export const BlogCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new comment on a blog post
         * @summary Create a new comment
         * @param {string} blogSlug Blog slug
         * @param {CreateCommentDto} createCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerCreateComment(blogSlug: string, createCommentDto: CreateCommentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerCreateComment(blogSlug, createCommentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing comment
         * @summary Delete a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerDeleteComment(commentId: string, blogSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerDeleteComment(commentId, blogSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Flag a comment for moderation review
         * @summary Flag a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {FlagBlogDto} flagBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerFlagComment(commentId: string, blogSlug: string, flagBlogDto: FlagBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerFlagComment(commentId, blogSlug, flagBlogDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get paginated comments for a specific blog
         * @summary Get blog comments
         * @param {string} blogSlug Blog slug
         * @param {string} page 
         * @param {string} limit 
         * @param {string} sort 
         * @param {string} parentId 
         * @param {string} userSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerGetComments(blogSlug: string, page: string, limit: string, sort: string, parentId: string, userSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerGetComments(blogSlug, page, limit, sort, parentId, userSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a like to a comment
         * @summary Like a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerLikeComment(commentId: string, blogSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerLikeComment(commentId, blogSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a like from a comment
         * @summary Unlike a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerUnlikeComment(commentId: string, blogSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerUnlikeComment(commentId, blogSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing comment
         * @summary Update a comment
         * @param {string} commentId Comment ID
         * @param {string} blogSlug Blog slug
         * @param {UpdateCommentDto} updateCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogCommentsControllerUpdateComment(commentId: string, blogSlug: string, updateCommentDto: UpdateCommentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogCommentsControllerUpdateComment(commentId, blogSlug, updateCommentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogCommentsApi - factory interface
 * @export
 */
export const BlogCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogCommentsApiFp(configuration)
    return {
        /**
         * Create a new comment on a blog post
         * @summary Create a new comment
         * @param {BlogCommentsApiBlogCommentsControllerCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerCreateComment(requestParameters: BlogCommentsApiBlogCommentsControllerCreateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto> {
            return localVarFp.blogCommentsControllerCreateComment(requestParameters.blogSlug, requestParameters.createCommentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing comment
         * @summary Delete a comment
         * @param {BlogCommentsApiBlogCommentsControllerDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerDeleteComment(requestParameters: BlogCommentsApiBlogCommentsControllerDeleteCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.blogCommentsControllerDeleteComment(requestParameters.commentId, requestParameters.blogSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Flag a comment for moderation review
         * @summary Flag a comment
         * @param {BlogCommentsApiBlogCommentsControllerFlagCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerFlagComment(requestParameters: BlogCommentsApiBlogCommentsControllerFlagCommentRequest, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto> {
            return localVarFp.blogCommentsControllerFlagComment(requestParameters.commentId, requestParameters.blogSlug, requestParameters.flagBlogDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get paginated comments for a specific blog
         * @summary Get blog comments
         * @param {BlogCommentsApiBlogCommentsControllerGetCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerGetComments(requestParameters: BlogCommentsApiBlogCommentsControllerGetCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsListResponseDto> {
            return localVarFp.blogCommentsControllerGetComments(requestParameters.blogSlug, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.parentId, requestParameters.userSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a like to a comment
         * @summary Like a comment
         * @param {BlogCommentsApiBlogCommentsControllerLikeCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerLikeComment(requestParameters: BlogCommentsApiBlogCommentsControllerLikeCommentRequest, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto> {
            return localVarFp.blogCommentsControllerLikeComment(requestParameters.commentId, requestParameters.blogSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a like from a comment
         * @summary Unlike a comment
         * @param {BlogCommentsApiBlogCommentsControllerUnlikeCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerUnlikeComment(requestParameters: BlogCommentsApiBlogCommentsControllerUnlikeCommentRequest, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto> {
            return localVarFp.blogCommentsControllerUnlikeComment(requestParameters.commentId, requestParameters.blogSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing comment
         * @summary Update a comment
         * @param {BlogCommentsApiBlogCommentsControllerUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogCommentsControllerUpdateComment(requestParameters: BlogCommentsApiBlogCommentsControllerUpdateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto> {
            return localVarFp.blogCommentsControllerUpdateComment(requestParameters.commentId, requestParameters.blogSlug, requestParameters.updateCommentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogCommentsApi - interface
 * @export
 * @interface BlogCommentsApi
 */
export interface BlogCommentsApiInterface {
    /**
     * Create a new comment on a blog post
     * @summary Create a new comment
     * @param {string} blogSlug Blog slug
     * @param {CreateCommentDto} createCommentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerCreateComment(blogSlug: string, createCommentDto: CreateCommentDto, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto>;

    /**
     * Delete an existing comment
     * @summary Delete a comment
     * @param {string} commentId Comment ID
     * @param {string} blogSlug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerDeleteComment(commentId: string, blogSlug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Flag a comment for moderation review
     * @summary Flag a comment
     * @param {string} commentId Comment ID
     * @param {string} blogSlug Blog slug
     * @param {FlagBlogDto} flagBlogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerFlagComment(commentId: string, blogSlug: string, flagBlogDto: FlagBlogDto, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto>;

    /**
     * Get paginated comments for a specific blog
     * @summary Get blog comments
     * @param {string} blogSlug Blog slug
     * @param {string} page 
     * @param {string} limit 
     * @param {string} sort 
     * @param {string} parentId 
     * @param {string} userSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerGetComments(blogSlug: string, page: string, limit: string, sort: string, parentId: string, userSlug: string, options?: AxiosRequestConfig): AxiosPromise<CommentsListResponseDto>;

    /**
     * Add a like to a comment
     * @summary Like a comment
     * @param {string} commentId Comment ID
     * @param {string} blogSlug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerLikeComment(commentId: string, blogSlug: string, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto>;

    /**
     * Remove a like from a comment
     * @summary Unlike a comment
     * @param {string} commentId Comment ID
     * @param {string} blogSlug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerUnlikeComment(commentId: string, blogSlug: string, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto>;

    /**
     * Update an existing comment
     * @summary Update a comment
     * @param {string} commentId Comment ID
     * @param {string} blogSlug Blog slug
     * @param {UpdateCommentDto} updateCommentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApiInterface
     */
    blogCommentsControllerUpdateComment(commentId: string, blogSlug: string, updateCommentDto: UpdateCommentDto, options?: AxiosRequestConfig): AxiosPromise<CommentActionResponseDto>;

}

/**
 * Request parameters for blogCommentsControllerCreateComment operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerCreateCommentRequest
 */
export interface BlogCommentsApiBlogCommentsControllerCreateCommentRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerCreateComment
     */
    readonly blogSlug: string

    /**
     * 
     * @type {CreateCommentDto}
     * @memberof BlogCommentsApiBlogCommentsControllerCreateComment
     */
    readonly createCommentDto: CreateCommentDto
}

/**
 * Request parameters for blogCommentsControllerDeleteComment operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerDeleteCommentRequest
 */
export interface BlogCommentsApiBlogCommentsControllerDeleteCommentRequest {
    /**
     * Comment ID
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerDeleteComment
     */
    readonly commentId: string

    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerDeleteComment
     */
    readonly blogSlug: string
}

/**
 * Request parameters for blogCommentsControllerFlagComment operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerFlagCommentRequest
 */
export interface BlogCommentsApiBlogCommentsControllerFlagCommentRequest {
    /**
     * Comment ID
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerFlagComment
     */
    readonly commentId: string

    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerFlagComment
     */
    readonly blogSlug: string

    /**
     * 
     * @type {FlagBlogDto}
     * @memberof BlogCommentsApiBlogCommentsControllerFlagComment
     */
    readonly flagBlogDto: FlagBlogDto
}

/**
 * Request parameters for blogCommentsControllerGetComments operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerGetCommentsRequest
 */
export interface BlogCommentsApiBlogCommentsControllerGetCommentsRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerGetComments
     */
    readonly blogSlug: string

    /**
     * 
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerGetComments
     */
    readonly page: string

    /**
     * 
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerGetComments
     */
    readonly limit: string

    /**
     * 
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerGetComments
     */
    readonly sort: string

    /**
     * 
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerGetComments
     */
    readonly parentId: string

    /**
     * 
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerGetComments
     */
    readonly userSlug: string
}

/**
 * Request parameters for blogCommentsControllerLikeComment operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerLikeCommentRequest
 */
export interface BlogCommentsApiBlogCommentsControllerLikeCommentRequest {
    /**
     * Comment ID
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerLikeComment
     */
    readonly commentId: string

    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerLikeComment
     */
    readonly blogSlug: string
}

/**
 * Request parameters for blogCommentsControllerUnlikeComment operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerUnlikeCommentRequest
 */
export interface BlogCommentsApiBlogCommentsControllerUnlikeCommentRequest {
    /**
     * Comment ID
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerUnlikeComment
     */
    readonly commentId: string

    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerUnlikeComment
     */
    readonly blogSlug: string
}

/**
 * Request parameters for blogCommentsControllerUpdateComment operation in BlogCommentsApi.
 * @export
 * @interface BlogCommentsApiBlogCommentsControllerUpdateCommentRequest
 */
export interface BlogCommentsApiBlogCommentsControllerUpdateCommentRequest {
    /**
     * Comment ID
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerUpdateComment
     */
    readonly commentId: string

    /**
     * Blog slug
     * @type {string}
     * @memberof BlogCommentsApiBlogCommentsControllerUpdateComment
     */
    readonly blogSlug: string

    /**
     * 
     * @type {UpdateCommentDto}
     * @memberof BlogCommentsApiBlogCommentsControllerUpdateComment
     */
    readonly updateCommentDto: UpdateCommentDto
}

/**
 * BlogCommentsApi - object-oriented interface
 * @export
 * @class BlogCommentsApi
 * @extends {BaseAPI}
 */
export class BlogCommentsApi extends BaseAPI implements BlogCommentsApiInterface {
    /**
     * Create a new comment on a blog post
     * @summary Create a new comment
     * @param {BlogCommentsApiBlogCommentsControllerCreateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerCreateComment(requestParameters: BlogCommentsApiBlogCommentsControllerCreateCommentRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerCreateComment(requestParameters.blogSlug, requestParameters.createCommentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing comment
     * @summary Delete a comment
     * @param {BlogCommentsApiBlogCommentsControllerDeleteCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerDeleteComment(requestParameters: BlogCommentsApiBlogCommentsControllerDeleteCommentRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerDeleteComment(requestParameters.commentId, requestParameters.blogSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flag a comment for moderation review
     * @summary Flag a comment
     * @param {BlogCommentsApiBlogCommentsControllerFlagCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerFlagComment(requestParameters: BlogCommentsApiBlogCommentsControllerFlagCommentRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerFlagComment(requestParameters.commentId, requestParameters.blogSlug, requestParameters.flagBlogDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get paginated comments for a specific blog
     * @summary Get blog comments
     * @param {BlogCommentsApiBlogCommentsControllerGetCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerGetComments(requestParameters: BlogCommentsApiBlogCommentsControllerGetCommentsRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerGetComments(requestParameters.blogSlug, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.parentId, requestParameters.userSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a like to a comment
     * @summary Like a comment
     * @param {BlogCommentsApiBlogCommentsControllerLikeCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerLikeComment(requestParameters: BlogCommentsApiBlogCommentsControllerLikeCommentRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerLikeComment(requestParameters.commentId, requestParameters.blogSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a like from a comment
     * @summary Unlike a comment
     * @param {BlogCommentsApiBlogCommentsControllerUnlikeCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerUnlikeComment(requestParameters: BlogCommentsApiBlogCommentsControllerUnlikeCommentRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerUnlikeComment(requestParameters.commentId, requestParameters.blogSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing comment
     * @summary Update a comment
     * @param {BlogCommentsApiBlogCommentsControllerUpdateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogCommentsApi
     */
    public blogCommentsControllerUpdateComment(requestParameters: BlogCommentsApiBlogCommentsControllerUpdateCommentRequest, options?: AxiosRequestConfig) {
        return BlogCommentsApiFp(this.configuration).blogCommentsControllerUpdateComment(requestParameters.commentId, requestParameters.blogSlug, requestParameters.updateCommentDto, options).then((request) => request(this.axios, this.basePath));
    }
}
