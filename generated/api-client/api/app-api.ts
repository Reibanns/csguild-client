/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppControllerGetHealth200Response } from '../models';
/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check server health
         * @param {string} xForwardedFor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHealth: async (xForwardedFor: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xForwardedFor' is not null or undefined
            assertParamExists('appControllerGetHealth', 'xForwardedFor', xForwardedFor)
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xForwardedFor != null) {
                localVarHeaderParameter['x-forwarded-for'] = String(xForwardedFor);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a tabbed interface for viewing service and route logs in real-time
         * @summary Log viewer interface
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsControllerGetLogViewer: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check server health
         * @param {string} xForwardedFor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHealth(xForwardedFor: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppControllerGetHealth200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHealth(xForwardedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Displays a tabbed interface for viewing service and route logs in real-time
         * @summary Log viewer interface
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsControllerGetLogViewer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsControllerGetLogViewer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @summary Check server health
         * @param {AppApiAppControllerGetHealthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHealth(requestParameters: AppApiAppControllerGetHealthRequest, options?: AxiosRequestConfig): AxiosPromise<AppControllerGetHealth200Response> {
            return localVarFp.appControllerGetHealth(requestParameters.xForwardedFor, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a tabbed interface for viewing service and route logs in real-time
         * @summary Log viewer interface
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsControllerGetLogViewer(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsControllerGetLogViewer(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - interface
 * @export
 * @interface AppApi
 */
export interface AppApiInterface {
    /**
     * 
     * @summary Check server health
     * @param {string} xForwardedFor 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appControllerGetHealth(xForwardedFor: string, options?: AxiosRequestConfig): AxiosPromise<AppControllerGetHealth200Response>;

    /**
     * Displays a tabbed interface for viewing service and route logs in real-time
     * @summary Log viewer interface
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    logsControllerGetLogViewer(options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for appControllerGetHealth operation in AppApi.
 * @export
 * @interface AppApiAppControllerGetHealthRequest
 */
export interface AppApiAppControllerGetHealthRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiAppControllerGetHealth
     */
    readonly xForwardedFor: string
}

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI implements AppApiInterface {
    /**
     * 
     * @summary Check server health
     * @param {AppApiAppControllerGetHealthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHealth(requestParameters: AppApiAppControllerGetHealthRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHealth(requestParameters.xForwardedFor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a tabbed interface for viewing service and route logs in real-time
     * @summary Log viewer interface
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public logsControllerGetLogViewer(options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).logsControllerGetLogViewer(options).then((request) => request(this.axios, this.basePath));
    }
}
