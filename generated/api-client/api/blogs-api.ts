/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthorStatsResponseDto } from '../models';
// @ts-ignore
import { BlogAnalyticsResponseDto } from '../models';
// @ts-ignore
import { BlogDetailResponseDto } from '../models';
// @ts-ignore
import { BlogListResponseDto } from '../models';
// @ts-ignore
import { BlogStatsResponseDto } from '../models';
// @ts-ignore
import { CategoryListResponseDto } from '../models';
// @ts-ignore
import { TagListResponseDto } from '../models';
/**
 * BlogsApi - axios parameter creator
 * @export
 */
export const BlogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a paginated list of published blogs with optional filtering by search term, tags, categories, and other criteria.
         * @summary Get all published blogs with filtering and pagination
         * @param {string} [search] Search in blog title, content, and excerpt
         * @param {string} [tags] Comma-separated list of tag slugs to filter by
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {string} [categories] Comma-separated list of category slugs to filter by
         * @param {string} [authorSlug] Filter by author username
         * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [status] Filter by blog status
         * @param {boolean} [pinned] Filter to show only pinned blogs
         * @param {boolean} [featured] Filter to show only featured blogs
         * @param {string} [dateFrom] Filter blogs published from this date (ISO 8601)
         * @param {string} [dateTo] Filter blogs published until this date (ISO 8601)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount'} [sortBy] Field to sort by
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerFindAll: async (search?: string, tags?: string, userSlug?: string, categories?: string, authorSlug?: string, status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', pinned?: boolean, featured?: boolean, dateFrom?: string, dateTo?: string, page?: number, limit?: number, sortBy?: 'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount', sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (userSlug !== undefined) {
                localVarQueryParameter['userSlug'] = userSlug;
            }

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }

            if (authorSlug !== undefined) {
                localVarQueryParameter['authorSlug'] = authorSlug;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pinned !== undefined) {
                localVarQueryParameter['pinned'] = pinned;
            }

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific blog
         * @summary Get a blog by slug
         * @param {string} slug Blog slug
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerFindOne: async (slug: string, userSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsQueryControllerFindOne', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userSlug !== undefined) {
                localVarQueryParameter['userSlug'] = userSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get comprehensive analytics for blogs including metrics, top authors, categories, and tags
         * @summary Get blog analytics
         * @param {string} timeframe 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetAnalytics: async (timeframe: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeframe' is not null or undefined
            assertParamExists('blogsQueryControllerGetAnalytics', 'timeframe', timeframe)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('blogsQueryControllerGetAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('blogsQueryControllerGetAnalytics', 'endDate', endDate)
            const localVarPath = `/api/blogs/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeframe !== undefined) {
                localVarQueryParameter['timeframe'] = timeframe;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed statistics for a specific author
         * @summary Get author statistics
         * @param {string} authorId Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetAuthorStats: async (authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('blogsQueryControllerGetAuthorStats', 'authorId', authorId)
            const localVarPath = `/api/blogs/authors/{authorId}/stats`
                .replace(`{${"authorId"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get revision history for a specific blog (admin only)
         * @summary Get blog revisions
         * @param {string} slug Blog slug
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetBlogRevisions: async (slug: string, page: string, limit: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsQueryControllerGetBlogRevisions', 'slug', slug)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('blogsQueryControllerGetBlogRevisions', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('blogsQueryControllerGetBlogRevisions', 'limit', limit)
            const localVarPath = `/api/blogs/{slug}/revisions`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed statistics for a specific blog
         * @summary Get blog statistics
         * @param {string} id Blog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetBlogStats: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('blogsQueryControllerGetBlogStats', 'id', id)
            const localVarPath = `/api/blogs/stats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all available blog categories with pagination
         * @summary Get all categories
         * @param {boolean} [onlyActive] Only show active categories
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetCategories: async (onlyActive?: boolean, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlyActive !== undefined) {
                localVarQueryParameter['onlyActive'] = onlyActive;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all blogs that are currently featured.
         * @summary Get all featured blogs
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetFeatured: async (userSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/featured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userSlug !== undefined) {
                localVarQueryParameter['userSlug'] = userSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all blogs that are currently pinned.
         * @summary Get all pinned blogs
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetPinned: async (userSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/pinned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userSlug !== undefined) {
                localVarQueryParameter['userSlug'] = userSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get most popular blogs based on views and engagement
         * @summary Get popular blogs
         * @param {number} [limit] Number of popular blogs to return
         * @param {'day' | 'week' | 'month' | 'all'} [timeframe] Timeframe for popularity calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetPopularBlogs: async (limit?: number, timeframe?: 'day' | 'week' | 'month' | 'all', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (timeframe !== undefined) {
                localVarQueryParameter['timeframe'] = timeframe;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recently published blogs
         * @summary Get recent blogs
         * @param {number} [limit] Number of recent blogs to return
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetRecentBlogs: async (limit?: number, userSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/recent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userSlug !== undefined) {
                localVarQueryParameter['userSlug'] = userSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get blogs related to the specified blog based on tags and category
         * @summary Get related blogs
         * @param {string} slug Blog slug
         * @param {number} [limit] Number of related blogs to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetRelatedBlogs: async (slug: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsQueryControllerGetRelatedBlogs', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/related`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all available blog tags with pagination
         * @summary Get all tags
         * @param {boolean} [onlyPopular] Only show tags with associated blogs
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetTags: async (onlyPopular?: boolean, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlyPopular !== undefined) {
                localVarQueryParameter['onlyPopular'] = onlyPopular;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get blogs that are currently trending based on engagement metrics
         * @summary Get trending blogs
         * @param {number} [limit] Number of trending blogs to return
         * @param {'day' | 'week' | 'month'} [timeframe] Timeframe for trending calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetTrendingBlogs: async (limit?: number, timeframe?: 'day' | 'week' | 'month', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (timeframe !== undefined) {
                localVarQueryParameter['timeframe'] = timeframe;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogsApi - functional programming interface
 * @export
 */
export const BlogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a paginated list of published blogs with optional filtering by search term, tags, categories, and other criteria.
         * @summary Get all published blogs with filtering and pagination
         * @param {string} [search] Search in blog title, content, and excerpt
         * @param {string} [tags] Comma-separated list of tag slugs to filter by
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {string} [categories] Comma-separated list of category slugs to filter by
         * @param {string} [authorSlug] Filter by author username
         * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [status] Filter by blog status
         * @param {boolean} [pinned] Filter to show only pinned blogs
         * @param {boolean} [featured] Filter to show only featured blogs
         * @param {string} [dateFrom] Filter blogs published from this date (ISO 8601)
         * @param {string} [dateTo] Filter blogs published until this date (ISO 8601)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount'} [sortBy] Field to sort by
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerFindAll(search?: string, tags?: string, userSlug?: string, categories?: string, authorSlug?: string, status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', pinned?: boolean, featured?: boolean, dateFrom?: string, dateTo?: string, page?: number, limit?: number, sortBy?: 'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount', sortOrder?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerFindAll(search, tags, userSlug, categories, authorSlug, status, pinned, featured, dateFrom, dateTo, page, limit, sortBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve detailed information about a specific blog
         * @summary Get a blog by slug
         * @param {string} slug Blog slug
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerFindOne(slug: string, userSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerFindOne(slug, userSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get comprehensive analytics for blogs including metrics, top authors, categories, and tags
         * @summary Get blog analytics
         * @param {string} timeframe 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetAnalytics(timeframe: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogAnalyticsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetAnalytics(timeframe, startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get detailed statistics for a specific author
         * @summary Get author statistics
         * @param {string} authorId Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetAuthorStats(authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorStatsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetAuthorStats(authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get revision history for a specific blog (admin only)
         * @summary Get blog revisions
         * @param {string} slug Blog slug
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetBlogRevisions(slug: string, page: string, limit: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetBlogRevisions(slug, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get detailed statistics for a specific blog
         * @summary Get blog statistics
         * @param {string} id Blog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetBlogStats(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogStatsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetBlogStats(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all available blog categories with pagination
         * @summary Get all categories
         * @param {boolean} [onlyActive] Only show active categories
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetCategories(onlyActive?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetCategories(onlyActive, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all blogs that are currently featured.
         * @summary Get all featured blogs
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetFeatured(userSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetFeatured(userSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all blogs that are currently pinned.
         * @summary Get all pinned blogs
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetPinned(userSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetPinned(userSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get most popular blogs based on views and engagement
         * @summary Get popular blogs
         * @param {number} [limit] Number of popular blogs to return
         * @param {'day' | 'week' | 'month' | 'all'} [timeframe] Timeframe for popularity calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetPopularBlogs(limit?: number, timeframe?: 'day' | 'week' | 'month' | 'all', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetPopularBlogs(limit, timeframe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recently published blogs
         * @summary Get recent blogs
         * @param {number} [limit] Number of recent blogs to return
         * @param {string} [userSlug] Optional user slug for personalized data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetRecentBlogs(limit?: number, userSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetRecentBlogs(limit, userSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get blogs related to the specified blog based on tags and category
         * @summary Get related blogs
         * @param {string} slug Blog slug
         * @param {number} [limit] Number of related blogs to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetRelatedBlogs(slug: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetRelatedBlogs(slug, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all available blog tags with pagination
         * @summary Get all tags
         * @param {boolean} [onlyPopular] Only show tags with associated blogs
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetTags(onlyPopular?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetTags(onlyPopular, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get blogs that are currently trending based on engagement metrics
         * @summary Get trending blogs
         * @param {number} [limit] Number of trending blogs to return
         * @param {'day' | 'week' | 'month'} [timeframe] Timeframe for trending calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsQueryControllerGetTrendingBlogs(limit?: number, timeframe?: 'day' | 'week' | 'month', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsQueryControllerGetTrendingBlogs(limit, timeframe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogsApi - factory interface
 * @export
 */
export const BlogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogsApiFp(configuration)
    return {
        /**
         * Retrieve a paginated list of published blogs with optional filtering by search term, tags, categories, and other criteria.
         * @summary Get all published blogs with filtering and pagination
         * @param {BlogsApiBlogsQueryControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerFindAll(requestParameters: BlogsApiBlogsQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerFindAll(requestParameters.search, requestParameters.tags, requestParameters.userSlug, requestParameters.categories, requestParameters.authorSlug, requestParameters.status, requestParameters.pinned, requestParameters.featured, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.page, requestParameters.limit, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific blog
         * @summary Get a blog by slug
         * @param {BlogsApiBlogsQueryControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerFindOne(requestParameters: BlogsApiBlogsQueryControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<BlogDetailResponseDto> {
            return localVarFp.blogsQueryControllerFindOne(requestParameters.slug, requestParameters.userSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get comprehensive analytics for blogs including metrics, top authors, categories, and tags
         * @summary Get blog analytics
         * @param {BlogsApiBlogsQueryControllerGetAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetAnalytics(requestParameters: BlogsApiBlogsQueryControllerGetAnalyticsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogAnalyticsResponseDto> {
            return localVarFp.blogsQueryControllerGetAnalytics(requestParameters.timeframe, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed statistics for a specific author
         * @summary Get author statistics
         * @param {BlogsApiBlogsQueryControllerGetAuthorStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetAuthorStats(requestParameters: BlogsApiBlogsQueryControllerGetAuthorStatsRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorStatsResponseDto> {
            return localVarFp.blogsQueryControllerGetAuthorStats(requestParameters.authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get revision history for a specific blog (admin only)
         * @summary Get blog revisions
         * @param {BlogsApiBlogsQueryControllerGetBlogRevisionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetBlogRevisions(requestParameters: BlogsApiBlogsQueryControllerGetBlogRevisionsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetBlogRevisions(requestParameters.slug, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed statistics for a specific blog
         * @summary Get blog statistics
         * @param {BlogsApiBlogsQueryControllerGetBlogStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetBlogStats(requestParameters: BlogsApiBlogsQueryControllerGetBlogStatsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogStatsResponseDto> {
            return localVarFp.blogsQueryControllerGetBlogStats(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all available blog categories with pagination
         * @summary Get all categories
         * @param {BlogsApiBlogsQueryControllerGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetCategories(requestParameters: BlogsApiBlogsQueryControllerGetCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CategoryListResponseDto> {
            return localVarFp.blogsQueryControllerGetCategories(requestParameters.onlyActive, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all blogs that are currently featured.
         * @summary Get all featured blogs
         * @param {BlogsApiBlogsQueryControllerGetFeaturedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetFeatured(requestParameters: BlogsApiBlogsQueryControllerGetFeaturedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetFeatured(requestParameters.userSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all blogs that are currently pinned.
         * @summary Get all pinned blogs
         * @param {BlogsApiBlogsQueryControllerGetPinnedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetPinned(requestParameters: BlogsApiBlogsQueryControllerGetPinnedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetPinned(requestParameters.userSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get most popular blogs based on views and engagement
         * @summary Get popular blogs
         * @param {BlogsApiBlogsQueryControllerGetPopularBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetPopularBlogs(requestParameters: BlogsApiBlogsQueryControllerGetPopularBlogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetPopularBlogs(requestParameters.limit, requestParameters.timeframe, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recently published blogs
         * @summary Get recent blogs
         * @param {BlogsApiBlogsQueryControllerGetRecentBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetRecentBlogs(requestParameters: BlogsApiBlogsQueryControllerGetRecentBlogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetRecentBlogs(requestParameters.limit, requestParameters.userSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get blogs related to the specified blog based on tags and category
         * @summary Get related blogs
         * @param {BlogsApiBlogsQueryControllerGetRelatedBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetRelatedBlogs(requestParameters: BlogsApiBlogsQueryControllerGetRelatedBlogsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetRelatedBlogs(requestParameters.slug, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all available blog tags with pagination
         * @summary Get all tags
         * @param {BlogsApiBlogsQueryControllerGetTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetTags(requestParameters: BlogsApiBlogsQueryControllerGetTagsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TagListResponseDto> {
            return localVarFp.blogsQueryControllerGetTags(requestParameters.onlyPopular, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Get blogs that are currently trending based on engagement metrics
         * @summary Get trending blogs
         * @param {BlogsApiBlogsQueryControllerGetTrendingBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsQueryControllerGetTrendingBlogs(requestParameters: BlogsApiBlogsQueryControllerGetTrendingBlogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsQueryControllerGetTrendingBlogs(requestParameters.limit, requestParameters.timeframe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogsApi - interface
 * @export
 * @interface BlogsApi
 */
export interface BlogsApiInterface {
    /**
     * Retrieve a paginated list of published blogs with optional filtering by search term, tags, categories, and other criteria.
     * @summary Get all published blogs with filtering and pagination
     * @param {string} [search] Search in blog title, content, and excerpt
     * @param {string} [tags] Comma-separated list of tag slugs to filter by
     * @param {string} [userSlug] Optional user slug for personalized data
     * @param {string} [categories] Comma-separated list of category slugs to filter by
     * @param {string} [authorSlug] Filter by author username
     * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [status] Filter by blog status
     * @param {boolean} [pinned] Filter to show only pinned blogs
     * @param {boolean} [featured] Filter to show only featured blogs
     * @param {string} [dateFrom] Filter blogs published from this date (ISO 8601)
     * @param {string} [dateTo] Filter blogs published until this date (ISO 8601)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount'} [sortBy] Field to sort by
     * @param {'asc' | 'desc'} [sortOrder] Sort direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerFindAll(search?: string, tags?: string, userSlug?: string, categories?: string, authorSlug?: string, status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', pinned?: boolean, featured?: boolean, dateFrom?: string, dateTo?: string, page?: number, limit?: number, sortBy?: 'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount', sortOrder?: 'asc' | 'desc', options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve detailed information about a specific blog
     * @summary Get a blog by slug
     * @param {string} slug Blog slug
     * @param {string} [userSlug] Optional user slug for personalized data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerFindOne(slug: string, userSlug?: string, options?: AxiosRequestConfig): AxiosPromise<BlogDetailResponseDto>;

    /**
     * Get comprehensive analytics for blogs including metrics, top authors, categories, and tags
     * @summary Get blog analytics
     * @param {string} timeframe 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetAnalytics(timeframe: string, startDate: string, endDate: string, options?: AxiosRequestConfig): AxiosPromise<BlogAnalyticsResponseDto>;

    /**
     * Get detailed statistics for a specific author
     * @summary Get author statistics
     * @param {string} authorId Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetAuthorStats(authorId: string, options?: AxiosRequestConfig): AxiosPromise<AuthorStatsResponseDto>;

    /**
     * Get revision history for a specific blog (admin only)
     * @summary Get blog revisions
     * @param {string} slug Blog slug
     * @param {string} page 
     * @param {string} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetBlogRevisions(slug: string, page: string, limit: string, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Get detailed statistics for a specific blog
     * @summary Get blog statistics
     * @param {string} id Blog ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetBlogStats(id: string, options?: AxiosRequestConfig): AxiosPromise<BlogStatsResponseDto>;

    /**
     * Retrieve all available blog categories with pagination
     * @summary Get all categories
     * @param {boolean} [onlyActive] Only show active categories
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetCategories(onlyActive?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<CategoryListResponseDto>;

    /**
     * Retrieve all blogs that are currently featured.
     * @summary Get all featured blogs
     * @param {string} [userSlug] Optional user slug for personalized data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetFeatured(userSlug?: string, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve all blogs that are currently pinned.
     * @summary Get all pinned blogs
     * @param {string} [userSlug] Optional user slug for personalized data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetPinned(userSlug?: string, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Get most popular blogs based on views and engagement
     * @summary Get popular blogs
     * @param {number} [limit] Number of popular blogs to return
     * @param {'day' | 'week' | 'month' | 'all'} [timeframe] Timeframe for popularity calculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetPopularBlogs(limit?: number, timeframe?: 'day' | 'week' | 'month' | 'all', options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Get recently published blogs
     * @summary Get recent blogs
     * @param {number} [limit] Number of recent blogs to return
     * @param {string} [userSlug] Optional user slug for personalized data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetRecentBlogs(limit?: number, userSlug?: string, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Get blogs related to the specified blog based on tags and category
     * @summary Get related blogs
     * @param {string} slug Blog slug
     * @param {number} [limit] Number of related blogs to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetRelatedBlogs(slug: string, limit?: number, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve all available blog tags with pagination
     * @summary Get all tags
     * @param {boolean} [onlyPopular] Only show tags with associated blogs
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetTags(onlyPopular?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<TagListResponseDto>;

    /**
     * Get blogs that are currently trending based on engagement metrics
     * @summary Get trending blogs
     * @param {number} [limit] Number of trending blogs to return
     * @param {'day' | 'week' | 'month'} [timeframe] Timeframe for trending calculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApiInterface
     */
    blogsQueryControllerGetTrendingBlogs(limit?: number, timeframe?: 'day' | 'week' | 'month', options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

}

/**
 * Request parameters for blogsQueryControllerFindAll operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerFindAllRequest
 */
export interface BlogsApiBlogsQueryControllerFindAllRequest {
    /**
     * Search in blog title, content, and excerpt
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly search?: string

    /**
     * Comma-separated list of tag slugs to filter by
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly tags?: string

    /**
     * Optional user slug for personalized data
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly userSlug?: string

    /**
     * Comma-separated list of category slugs to filter by
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly categories?: string

    /**
     * Filter by author username
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly authorSlug?: string

    /**
     * Filter by blog status
     * @type {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'

    /**
     * Filter to show only pinned blogs
     * @type {boolean}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly pinned?: boolean

    /**
     * Filter to show only featured blogs
     * @type {boolean}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly featured?: boolean

    /**
     * Filter blogs published from this date (ISO 8601)
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly dateFrom?: string

    /**
     * Filter blogs published until this date (ISO 8601)
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly dateTo?: string

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly page?: number

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly limit?: number

    /**
     * Field to sort by
     * @type {'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount'}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly sortBy?: 'createdAt' | 'updatedAt' | 'publishedAt' | 'title' | 'viewCount' | 'likeCount' | 'commentCount'

    /**
     * Sort direction
     * @type {'asc' | 'desc'}
     * @memberof BlogsApiBlogsQueryControllerFindAll
     */
    readonly sortOrder?: 'asc' | 'desc'
}

/**
 * Request parameters for blogsQueryControllerFindOne operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerFindOneRequest
 */
export interface BlogsApiBlogsQueryControllerFindOneRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindOne
     */
    readonly slug: string

    /**
     * Optional user slug for personalized data
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerFindOne
     */
    readonly userSlug?: string
}

/**
 * Request parameters for blogsQueryControllerGetAnalytics operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetAnalyticsRequest
 */
export interface BlogsApiBlogsQueryControllerGetAnalyticsRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetAnalytics
     */
    readonly timeframe: string

    /**
     * 
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetAnalytics
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetAnalytics
     */
    readonly endDate: string
}

/**
 * Request parameters for blogsQueryControllerGetAuthorStats operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetAuthorStatsRequest
 */
export interface BlogsApiBlogsQueryControllerGetAuthorStatsRequest {
    /**
     * Author ID
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetAuthorStats
     */
    readonly authorId: string
}

/**
 * Request parameters for blogsQueryControllerGetBlogRevisions operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetBlogRevisionsRequest
 */
export interface BlogsApiBlogsQueryControllerGetBlogRevisionsRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetBlogRevisions
     */
    readonly slug: string

    /**
     * 
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetBlogRevisions
     */
    readonly page: string

    /**
     * 
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetBlogRevisions
     */
    readonly limit: string
}

/**
 * Request parameters for blogsQueryControllerGetBlogStats operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetBlogStatsRequest
 */
export interface BlogsApiBlogsQueryControllerGetBlogStatsRequest {
    /**
     * Blog ID
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetBlogStats
     */
    readonly id: string
}

/**
 * Request parameters for blogsQueryControllerGetCategories operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetCategoriesRequest
 */
export interface BlogsApiBlogsQueryControllerGetCategoriesRequest {
    /**
     * Only show active categories
     * @type {boolean}
     * @memberof BlogsApiBlogsQueryControllerGetCategories
     */
    readonly onlyActive?: boolean

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetCategories
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetCategories
     */
    readonly page?: number
}

/**
 * Request parameters for blogsQueryControllerGetFeatured operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetFeaturedRequest
 */
export interface BlogsApiBlogsQueryControllerGetFeaturedRequest {
    /**
     * Optional user slug for personalized data
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetFeatured
     */
    readonly userSlug?: string
}

/**
 * Request parameters for blogsQueryControllerGetPinned operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetPinnedRequest
 */
export interface BlogsApiBlogsQueryControllerGetPinnedRequest {
    /**
     * Optional user slug for personalized data
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetPinned
     */
    readonly userSlug?: string
}

/**
 * Request parameters for blogsQueryControllerGetPopularBlogs operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetPopularBlogsRequest
 */
export interface BlogsApiBlogsQueryControllerGetPopularBlogsRequest {
    /**
     * Number of popular blogs to return
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetPopularBlogs
     */
    readonly limit?: number

    /**
     * Timeframe for popularity calculation
     * @type {'day' | 'week' | 'month' | 'all'}
     * @memberof BlogsApiBlogsQueryControllerGetPopularBlogs
     */
    readonly timeframe?: 'day' | 'week' | 'month' | 'all'
}

/**
 * Request parameters for blogsQueryControllerGetRecentBlogs operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetRecentBlogsRequest
 */
export interface BlogsApiBlogsQueryControllerGetRecentBlogsRequest {
    /**
     * Number of recent blogs to return
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetRecentBlogs
     */
    readonly limit?: number

    /**
     * Optional user slug for personalized data
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetRecentBlogs
     */
    readonly userSlug?: string
}

/**
 * Request parameters for blogsQueryControllerGetRelatedBlogs operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetRelatedBlogsRequest
 */
export interface BlogsApiBlogsQueryControllerGetRelatedBlogsRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsApiBlogsQueryControllerGetRelatedBlogs
     */
    readonly slug: string

    /**
     * Number of related blogs to return
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetRelatedBlogs
     */
    readonly limit?: number
}

/**
 * Request parameters for blogsQueryControllerGetTags operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetTagsRequest
 */
export interface BlogsApiBlogsQueryControllerGetTagsRequest {
    /**
     * Only show tags with associated blogs
     * @type {boolean}
     * @memberof BlogsApiBlogsQueryControllerGetTags
     */
    readonly onlyPopular?: boolean

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetTags
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetTags
     */
    readonly page?: number
}

/**
 * Request parameters for blogsQueryControllerGetTrendingBlogs operation in BlogsApi.
 * @export
 * @interface BlogsApiBlogsQueryControllerGetTrendingBlogsRequest
 */
export interface BlogsApiBlogsQueryControllerGetTrendingBlogsRequest {
    /**
     * Number of trending blogs to return
     * @type {number}
     * @memberof BlogsApiBlogsQueryControllerGetTrendingBlogs
     */
    readonly limit?: number

    /**
     * Timeframe for trending calculation
     * @type {'day' | 'week' | 'month'}
     * @memberof BlogsApiBlogsQueryControllerGetTrendingBlogs
     */
    readonly timeframe?: 'day' | 'week' | 'month'
}

/**
 * BlogsApi - object-oriented interface
 * @export
 * @class BlogsApi
 * @extends {BaseAPI}
 */
export class BlogsApi extends BaseAPI implements BlogsApiInterface {
    /**
     * Retrieve a paginated list of published blogs with optional filtering by search term, tags, categories, and other criteria.
     * @summary Get all published blogs with filtering and pagination
     * @param {BlogsApiBlogsQueryControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerFindAll(requestParameters: BlogsApiBlogsQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerFindAll(requestParameters.search, requestParameters.tags, requestParameters.userSlug, requestParameters.categories, requestParameters.authorSlug, requestParameters.status, requestParameters.pinned, requestParameters.featured, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.page, requestParameters.limit, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific blog
     * @summary Get a blog by slug
     * @param {BlogsApiBlogsQueryControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerFindOne(requestParameters: BlogsApiBlogsQueryControllerFindOneRequest, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerFindOne(requestParameters.slug, requestParameters.userSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get comprehensive analytics for blogs including metrics, top authors, categories, and tags
     * @summary Get blog analytics
     * @param {BlogsApiBlogsQueryControllerGetAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetAnalytics(requestParameters: BlogsApiBlogsQueryControllerGetAnalyticsRequest, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetAnalytics(requestParameters.timeframe, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed statistics for a specific author
     * @summary Get author statistics
     * @param {BlogsApiBlogsQueryControllerGetAuthorStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetAuthorStats(requestParameters: BlogsApiBlogsQueryControllerGetAuthorStatsRequest, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetAuthorStats(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get revision history for a specific blog (admin only)
     * @summary Get blog revisions
     * @param {BlogsApiBlogsQueryControllerGetBlogRevisionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetBlogRevisions(requestParameters: BlogsApiBlogsQueryControllerGetBlogRevisionsRequest, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetBlogRevisions(requestParameters.slug, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed statistics for a specific blog
     * @summary Get blog statistics
     * @param {BlogsApiBlogsQueryControllerGetBlogStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetBlogStats(requestParameters: BlogsApiBlogsQueryControllerGetBlogStatsRequest, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetBlogStats(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all available blog categories with pagination
     * @summary Get all categories
     * @param {BlogsApiBlogsQueryControllerGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetCategories(requestParameters: BlogsApiBlogsQueryControllerGetCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetCategories(requestParameters.onlyActive, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all blogs that are currently featured.
     * @summary Get all featured blogs
     * @param {BlogsApiBlogsQueryControllerGetFeaturedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetFeatured(requestParameters: BlogsApiBlogsQueryControllerGetFeaturedRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetFeatured(requestParameters.userSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all blogs that are currently pinned.
     * @summary Get all pinned blogs
     * @param {BlogsApiBlogsQueryControllerGetPinnedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetPinned(requestParameters: BlogsApiBlogsQueryControllerGetPinnedRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetPinned(requestParameters.userSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get most popular blogs based on views and engagement
     * @summary Get popular blogs
     * @param {BlogsApiBlogsQueryControllerGetPopularBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetPopularBlogs(requestParameters: BlogsApiBlogsQueryControllerGetPopularBlogsRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetPopularBlogs(requestParameters.limit, requestParameters.timeframe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recently published blogs
     * @summary Get recent blogs
     * @param {BlogsApiBlogsQueryControllerGetRecentBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetRecentBlogs(requestParameters: BlogsApiBlogsQueryControllerGetRecentBlogsRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetRecentBlogs(requestParameters.limit, requestParameters.userSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get blogs related to the specified blog based on tags and category
     * @summary Get related blogs
     * @param {BlogsApiBlogsQueryControllerGetRelatedBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetRelatedBlogs(requestParameters: BlogsApiBlogsQueryControllerGetRelatedBlogsRequest, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetRelatedBlogs(requestParameters.slug, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all available blog tags with pagination
     * @summary Get all tags
     * @param {BlogsApiBlogsQueryControllerGetTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetTags(requestParameters: BlogsApiBlogsQueryControllerGetTagsRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetTags(requestParameters.onlyPopular, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get blogs that are currently trending based on engagement metrics
     * @summary Get trending blogs
     * @param {BlogsApiBlogsQueryControllerGetTrendingBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public blogsQueryControllerGetTrendingBlogs(requestParameters: BlogsApiBlogsQueryControllerGetTrendingBlogsRequest = {}, options?: AxiosRequestConfig) {
        return BlogsApiFp(this.configuration).blogsQueryControllerGetTrendingBlogs(requestParameters.limit, requestParameters.timeframe, options).then((request) => request(this.axios, this.basePath));
    }
}
