/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BlogListResponseDto } from '../models';
// @ts-ignore
import { MyBlogsListResponseDto } from '../models';
/**
 * BlogsExtendedApi - axios parameter creator
 * @export
 */
export const BlogsExtendedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all published blogs by a specific author
         * @summary Get blogs by author
         * @param {string} authorSlug Author username/slug
         * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [includeStatus] Include specific status (for author viewing their own blogs)
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBlogsByAuthor: async (authorSlug: string, includeStatus?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorSlug' is not null or undefined
            assertParamExists('blogsExtendedControllerGetBlogsByAuthor', 'authorSlug', authorSlug)
            const localVarPath = `/api/blogs/author/{authorSlug}`
                .replace(`{${"authorSlug"}}`, encodeURIComponent(String(authorSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeStatus !== undefined) {
                localVarQueryParameter['includeStatus'] = includeStatus;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all published blogs in a specific category
         * @summary Get blogs by category
         * @param {string} categorySlug Category slug
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBlogsByCategory: async (categorySlug: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categorySlug' is not null or undefined
            assertParamExists('blogsExtendedControllerGetBlogsByCategory', 'categorySlug', categorySlug)
            const localVarPath = `/api/blogs/category/{categorySlug}`
                .replace(`{${"categorySlug"}}`, encodeURIComponent(String(categorySlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all published blogs with a specific tag
         * @summary Get blogs by tag
         * @param {string} tagSlug Tag slug
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBlogsByTag: async (tagSlug: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagSlug' is not null or undefined
            assertParamExists('blogsExtendedControllerGetBlogsByTag', 'tagSlug', tagSlug)
            const localVarPath = `/api/blogs/tag/{tagSlug}`
                .replace(`{${"tagSlug"}}`, encodeURIComponent(String(tagSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all blogs bookmarked by the current user
         * @summary Get bookmarked blogs
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBookmarkedBlogs: async (limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/bookmarked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all blogs created by the current user
         * @summary Get my blogs
         * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [status] Filter by blog status
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetMyBlogs: async (status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blogs/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for blogs by content, title, or excerpt
         * @summary Search blogs
         * @param {string} q Search term
         * @param {string} [tags] Comma-separated tag slugs to filter by
         * @param {string} [categories] Comma-separated category slugs to filter by
         * @param {string} [authorSlug] Filter by author
         * @param {string} [dateFrom] Filter from date (ISO 8601)
         * @param {string} [dateTo] Filter to date (ISO 8601)
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerSearchBlogs: async (q: string, tags?: string, categories?: string, authorSlug?: string, dateFrom?: string, dateTo?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('blogsExtendedControllerSearchBlogs', 'q', q)
            const localVarPath = `/api/blogs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }

            if (authorSlug !== undefined) {
                localVarQueryParameter['authorSlug'] = authorSlug;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogsExtendedApi - functional programming interface
 * @export
 */
export const BlogsExtendedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogsExtendedApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all published blogs by a specific author
         * @summary Get blogs by author
         * @param {string} authorSlug Author username/slug
         * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [includeStatus] Include specific status (for author viewing their own blogs)
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsExtendedControllerGetBlogsByAuthor(authorSlug: string, includeStatus?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsExtendedControllerGetBlogsByAuthor(authorSlug, includeStatus, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all published blogs in a specific category
         * @summary Get blogs by category
         * @param {string} categorySlug Category slug
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsExtendedControllerGetBlogsByCategory(categorySlug: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsExtendedControllerGetBlogsByCategory(categorySlug, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all published blogs with a specific tag
         * @summary Get blogs by tag
         * @param {string} tagSlug Tag slug
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsExtendedControllerGetBlogsByTag(tagSlug: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsExtendedControllerGetBlogsByTag(tagSlug, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all blogs bookmarked by the current user
         * @summary Get bookmarked blogs
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsExtendedControllerGetBookmarkedBlogs(limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsExtendedControllerGetBookmarkedBlogs(limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all blogs created by the current user
         * @summary Get my blogs
         * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [status] Filter by blog status
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsExtendedControllerGetMyBlogs(status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyBlogsListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsExtendedControllerGetMyBlogs(status, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for blogs by content, title, or excerpt
         * @summary Search blogs
         * @param {string} q Search term
         * @param {string} [tags] Comma-separated tag slugs to filter by
         * @param {string} [categories] Comma-separated category slugs to filter by
         * @param {string} [authorSlug] Filter by author
         * @param {string} [dateFrom] Filter from date (ISO 8601)
         * @param {string} [dateTo] Filter to date (ISO 8601)
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsExtendedControllerSearchBlogs(q: string, tags?: string, categories?: string, authorSlug?: string, dateFrom?: string, dateTo?: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsExtendedControllerSearchBlogs(q, tags, categories, authorSlug, dateFrom, dateTo, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogsExtendedApi - factory interface
 * @export
 */
export const BlogsExtendedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogsExtendedApiFp(configuration)
    return {
        /**
         * Retrieve all published blogs by a specific author
         * @summary Get blogs by author
         * @param {BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBlogsByAuthor(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthorRequest, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsExtendedControllerGetBlogsByAuthor(requestParameters.authorSlug, requestParameters.includeStatus, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all published blogs in a specific category
         * @summary Get blogs by category
         * @param {BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBlogsByCategory(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsExtendedControllerGetBlogsByCategory(requestParameters.categorySlug, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all published blogs with a specific tag
         * @summary Get blogs by tag
         * @param {BlogsExtendedApiBlogsExtendedControllerGetBlogsByTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBlogsByTag(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBlogsByTagRequest, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsExtendedControllerGetBlogsByTag(requestParameters.tagSlug, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all blogs bookmarked by the current user
         * @summary Get bookmarked blogs
         * @param {BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetBookmarkedBlogs(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsExtendedControllerGetBookmarkedBlogs(requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all blogs created by the current user
         * @summary Get my blogs
         * @param {BlogsExtendedApiBlogsExtendedControllerGetMyBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerGetMyBlogs(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetMyBlogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MyBlogsListResponseDto> {
            return localVarFp.blogsExtendedControllerGetMyBlogs(requestParameters.status, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for blogs by content, title, or excerpt
         * @summary Search blogs
         * @param {BlogsExtendedApiBlogsExtendedControllerSearchBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsExtendedControllerSearchBlogs(requestParameters: BlogsExtendedApiBlogsExtendedControllerSearchBlogsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto> {
            return localVarFp.blogsExtendedControllerSearchBlogs(requestParameters.q, requestParameters.tags, requestParameters.categories, requestParameters.authorSlug, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogsExtendedApi - interface
 * @export
 * @interface BlogsExtendedApi
 */
export interface BlogsExtendedApiInterface {
    /**
     * Retrieve all published blogs by a specific author
     * @summary Get blogs by author
     * @param {string} authorSlug Author username/slug
     * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [includeStatus] Include specific status (for author viewing their own blogs)
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApiInterface
     */
    blogsExtendedControllerGetBlogsByAuthor(authorSlug: string, includeStatus?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve all published blogs in a specific category
     * @summary Get blogs by category
     * @param {string} categorySlug Category slug
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApiInterface
     */
    blogsExtendedControllerGetBlogsByCategory(categorySlug: string, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve all published blogs with a specific tag
     * @summary Get blogs by tag
     * @param {string} tagSlug Tag slug
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApiInterface
     */
    blogsExtendedControllerGetBlogsByTag(tagSlug: string, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve all blogs bookmarked by the current user
     * @summary Get bookmarked blogs
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApiInterface
     */
    blogsExtendedControllerGetBookmarkedBlogs(limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

    /**
     * Retrieve all blogs created by the current user
     * @summary Get my blogs
     * @param {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'} [status] Filter by blog status
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApiInterface
     */
    blogsExtendedControllerGetMyBlogs(status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<MyBlogsListResponseDto>;

    /**
     * Search for blogs by content, title, or excerpt
     * @summary Search blogs
     * @param {string} q Search term
     * @param {string} [tags] Comma-separated tag slugs to filter by
     * @param {string} [categories] Comma-separated category slugs to filter by
     * @param {string} [authorSlug] Filter by author
     * @param {string} [dateFrom] Filter from date (ISO 8601)
     * @param {string} [dateTo] Filter to date (ISO 8601)
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApiInterface
     */
    blogsExtendedControllerSearchBlogs(q: string, tags?: string, categories?: string, authorSlug?: string, dateFrom?: string, dateTo?: string, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<BlogListResponseDto>;

}

/**
 * Request parameters for blogsExtendedControllerGetBlogsByAuthor operation in BlogsExtendedApi.
 * @export
 * @interface BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthorRequest
 */
export interface BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthorRequest {
    /**
     * Author username/slug
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthor
     */
    readonly authorSlug: string

    /**
     * Include specific status (for author viewing their own blogs)
     * @type {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthor
     */
    readonly includeStatus?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthor
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthor
     */
    readonly page?: number
}

/**
 * Request parameters for blogsExtendedControllerGetBlogsByCategory operation in BlogsExtendedApi.
 * @export
 * @interface BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategoryRequest
 */
export interface BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategoryRequest {
    /**
     * Category slug
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategory
     */
    readonly categorySlug: string

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategory
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategory
     */
    readonly page?: number
}

/**
 * Request parameters for blogsExtendedControllerGetBlogsByTag operation in BlogsExtendedApi.
 * @export
 * @interface BlogsExtendedApiBlogsExtendedControllerGetBlogsByTagRequest
 */
export interface BlogsExtendedApiBlogsExtendedControllerGetBlogsByTagRequest {
    /**
     * Tag slug
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByTag
     */
    readonly tagSlug: string

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByTag
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBlogsByTag
     */
    readonly page?: number
}

/**
 * Request parameters for blogsExtendedControllerGetBookmarkedBlogs operation in BlogsExtendedApi.
 * @export
 * @interface BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogsRequest
 */
export interface BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogsRequest {
    /**
     * Items per page
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogs
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogs
     */
    readonly page?: number
}

/**
 * Request parameters for blogsExtendedControllerGetMyBlogs operation in BlogsExtendedApi.
 * @export
 * @interface BlogsExtendedApiBlogsExtendedControllerGetMyBlogsRequest
 */
export interface BlogsExtendedApiBlogsExtendedControllerGetMyBlogsRequest {
    /**
     * Filter by blog status
     * @type {'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetMyBlogs
     */
    readonly status?: 'DRAFT' | 'PUBLISHED' | 'SCHEDULED' | 'ARCHIVED'

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetMyBlogs
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerGetMyBlogs
     */
    readonly page?: number
}

/**
 * Request parameters for blogsExtendedControllerSearchBlogs operation in BlogsExtendedApi.
 * @export
 * @interface BlogsExtendedApiBlogsExtendedControllerSearchBlogsRequest
 */
export interface BlogsExtendedApiBlogsExtendedControllerSearchBlogsRequest {
    /**
     * Search term
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly q: string

    /**
     * Comma-separated tag slugs to filter by
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly tags?: string

    /**
     * Comma-separated category slugs to filter by
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly categories?: string

    /**
     * Filter by author
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly authorSlug?: string

    /**
     * Filter from date (ISO 8601)
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly dateFrom?: string

    /**
     * Filter to date (ISO 8601)
     * @type {string}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly dateTo?: string

    /**
     * Items per page
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogsExtendedApiBlogsExtendedControllerSearchBlogs
     */
    readonly page?: number
}

/**
 * BlogsExtendedApi - object-oriented interface
 * @export
 * @class BlogsExtendedApi
 * @extends {BaseAPI}
 */
export class BlogsExtendedApi extends BaseAPI implements BlogsExtendedApiInterface {
    /**
     * Retrieve all published blogs by a specific author
     * @summary Get blogs by author
     * @param {BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApi
     */
    public blogsExtendedControllerGetBlogsByAuthor(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBlogsByAuthorRequest, options?: AxiosRequestConfig) {
        return BlogsExtendedApiFp(this.configuration).blogsExtendedControllerGetBlogsByAuthor(requestParameters.authorSlug, requestParameters.includeStatus, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all published blogs in a specific category
     * @summary Get blogs by category
     * @param {BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApi
     */
    public blogsExtendedControllerGetBlogsByCategory(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBlogsByCategoryRequest, options?: AxiosRequestConfig) {
        return BlogsExtendedApiFp(this.configuration).blogsExtendedControllerGetBlogsByCategory(requestParameters.categorySlug, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all published blogs with a specific tag
     * @summary Get blogs by tag
     * @param {BlogsExtendedApiBlogsExtendedControllerGetBlogsByTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApi
     */
    public blogsExtendedControllerGetBlogsByTag(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBlogsByTagRequest, options?: AxiosRequestConfig) {
        return BlogsExtendedApiFp(this.configuration).blogsExtendedControllerGetBlogsByTag(requestParameters.tagSlug, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all blogs bookmarked by the current user
     * @summary Get bookmarked blogs
     * @param {BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApi
     */
    public blogsExtendedControllerGetBookmarkedBlogs(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetBookmarkedBlogsRequest = {}, options?: AxiosRequestConfig) {
        return BlogsExtendedApiFp(this.configuration).blogsExtendedControllerGetBookmarkedBlogs(requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all blogs created by the current user
     * @summary Get my blogs
     * @param {BlogsExtendedApiBlogsExtendedControllerGetMyBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApi
     */
    public blogsExtendedControllerGetMyBlogs(requestParameters: BlogsExtendedApiBlogsExtendedControllerGetMyBlogsRequest = {}, options?: AxiosRequestConfig) {
        return BlogsExtendedApiFp(this.configuration).blogsExtendedControllerGetMyBlogs(requestParameters.status, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for blogs by content, title, or excerpt
     * @summary Search blogs
     * @param {BlogsExtendedApiBlogsExtendedControllerSearchBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsExtendedApi
     */
    public blogsExtendedControllerSearchBlogs(requestParameters: BlogsExtendedApiBlogsExtendedControllerSearchBlogsRequest, options?: AxiosRequestConfig) {
        return BlogsExtendedApiFp(this.configuration).blogsExtendedControllerSearchBlogs(requestParameters.q, requestParameters.tags, requestParameters.categories, requestParameters.authorSlug, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}
