/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateFeedbackFormDto } from '../models';
// @ts-ignore
import { FeedbackFormResponseDto } from '../models';
// @ts-ignore
import { FeedbackFormUpdateResponseDto } from '../models';
// @ts-ignore
import { FeedbackSubmissionResponseDto } from '../models';
// @ts-ignore
import { OrganizerRatingResponseDto } from '../models';
// @ts-ignore
import { SubmitFeedbackResponseDto } from '../models';
// @ts-ignore
import { SubmitOrganizerRatingDto } from '../models';
// @ts-ignore
import { UpdateFeedbackFormDto } from '../models';
/**
 * EventFeedbackApi - axios parameter creator
 * @export
 */
export const EventFeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a feedback form for an event (Admin/Staff only)
         * @param {CreateFeedbackFormDto} createFeedbackFormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerCreateFeedbackForm: async (createFeedbackFormDto: CreateFeedbackFormDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFeedbackFormDto' is not null or undefined
            assertParamExists('feedbackControllerCreateFeedbackForm', 'createFeedbackFormDto', createFeedbackFormDto)
            const localVarPath = `/api/feedback/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeedbackFormDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get feedback form for an event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerGetFeedbackForm: async (eventId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('feedbackControllerGetFeedbackForm', 'eventId', eventId)
            const localVarPath = `/api/feedback/forms/event/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get feedback form for an event (public access with token)
         * @param {string} eventId 
         * @param {string} token JWT token for secure feedback form access
         * @param {string} userId Username of the attendee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerGetFeedbackFormPublic: async (eventId: string, token: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('feedbackControllerGetFeedbackFormPublic', 'eventId', eventId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('feedbackControllerGetFeedbackFormPublic', 'token', token)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('feedbackControllerGetFeedbackFormPublic', 'userId', userId)
            const localVarPath = `/api/feedback/forms/event/{eventId}/public`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit feedback response
         * @param {SubmitFeedbackResponseDto} submitFeedbackResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerSubmitFeedbackResponse: async (submitFeedbackResponseDto: SubmitFeedbackResponseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitFeedbackResponseDto' is not null or undefined
            assertParamExists('feedbackControllerSubmitFeedbackResponse', 'submitFeedbackResponseDto', submitFeedbackResponseDto)
            const localVarPath = `/api/feedback/responses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitFeedbackResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit feedback response (public access with token)
         * @param {string} token JWT token for secure feedback submission
         * @param {string} userId Username of the attendee
         * @param {SubmitFeedbackResponseDto} submitFeedbackResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerSubmitFeedbackResponsePublic: async (token: string, userId: string, submitFeedbackResponseDto: SubmitFeedbackResponseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('feedbackControllerSubmitFeedbackResponsePublic', 'token', token)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('feedbackControllerSubmitFeedbackResponsePublic', 'userId', userId)
            // verify required parameter 'submitFeedbackResponseDto' is not null or undefined
            assertParamExists('feedbackControllerSubmitFeedbackResponsePublic', 'submitFeedbackResponseDto', submitFeedbackResponseDto)
            const localVarPath = `/api/feedback/responses/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitFeedbackResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit organizer rating (public access with token)
         * @param {string} token JWT token for secure organizer rating submission
         * @param {string} userId Username of the attendee
         * @param {SubmitOrganizerRatingDto} submitOrganizerRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerSubmitOrganizerRatingPublic: async (token: string, userId: string, submitOrganizerRatingDto: SubmitOrganizerRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('feedbackControllerSubmitOrganizerRatingPublic', 'token', token)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('feedbackControllerSubmitOrganizerRatingPublic', 'userId', userId)
            // verify required parameter 'submitOrganizerRatingDto' is not null or undefined
            assertParamExists('feedbackControllerSubmitOrganizerRatingPublic', 'submitOrganizerRatingDto', submitOrganizerRatingDto)
            const localVarPath = `/api/feedback/organizer-rating/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitOrganizerRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a feedback form (Admin/Staff only)
         * @param {string} formId 
         * @param {UpdateFeedbackFormDto} updateFeedbackFormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerUpdateFeedbackForm: async (formId: string, updateFeedbackFormDto: UpdateFeedbackFormDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('feedbackControllerUpdateFeedbackForm', 'formId', formId)
            // verify required parameter 'updateFeedbackFormDto' is not null or undefined
            assertParamExists('feedbackControllerUpdateFeedbackForm', 'updateFeedbackFormDto', updateFeedbackFormDto)
            const localVarPath = `/api/feedback/forms/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFeedbackFormDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventFeedbackApi - functional programming interface
 * @export
 */
export const EventFeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventFeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a feedback form for an event (Admin/Staff only)
         * @param {CreateFeedbackFormDto} createFeedbackFormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerCreateFeedbackForm(createFeedbackFormDto: CreateFeedbackFormDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackFormResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerCreateFeedbackForm(createFeedbackFormDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get feedback form for an event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerGetFeedbackForm(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackFormResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerGetFeedbackForm(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get feedback form for an event (public access with token)
         * @param {string} eventId 
         * @param {string} token JWT token for secure feedback form access
         * @param {string} userId Username of the attendee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerGetFeedbackFormPublic(eventId: string, token: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackFormResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerGetFeedbackFormPublic(eventId, token, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit feedback response
         * @param {SubmitFeedbackResponseDto} submitFeedbackResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerSubmitFeedbackResponse(submitFeedbackResponseDto: SubmitFeedbackResponseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackSubmissionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerSubmitFeedbackResponse(submitFeedbackResponseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit feedback response (public access with token)
         * @param {string} token JWT token for secure feedback submission
         * @param {string} userId Username of the attendee
         * @param {SubmitFeedbackResponseDto} submitFeedbackResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerSubmitFeedbackResponsePublic(token: string, userId: string, submitFeedbackResponseDto: SubmitFeedbackResponseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackSubmissionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerSubmitFeedbackResponsePublic(token, userId, submitFeedbackResponseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit organizer rating (public access with token)
         * @param {string} token JWT token for secure organizer rating submission
         * @param {string} userId Username of the attendee
         * @param {SubmitOrganizerRatingDto} submitOrganizerRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerSubmitOrganizerRatingPublic(token: string, userId: string, submitOrganizerRatingDto: SubmitOrganizerRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizerRatingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerSubmitOrganizerRatingPublic(token, userId, submitOrganizerRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a feedback form (Admin/Staff only)
         * @param {string} formId 
         * @param {UpdateFeedbackFormDto} updateFeedbackFormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackControllerUpdateFeedbackForm(formId: string, updateFeedbackFormDto: UpdateFeedbackFormDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackFormUpdateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedbackControllerUpdateFeedbackForm(formId, updateFeedbackFormDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventFeedbackApi - factory interface
 * @export
 */
export const EventFeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventFeedbackApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a feedback form for an event (Admin/Staff only)
         * @param {EventFeedbackApiFeedbackControllerCreateFeedbackFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerCreateFeedbackForm(requestParameters: EventFeedbackApiFeedbackControllerCreateFeedbackFormRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormResponseDto> {
            return localVarFp.feedbackControllerCreateFeedbackForm(requestParameters.createFeedbackFormDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get feedback form for an event
         * @param {EventFeedbackApiFeedbackControllerGetFeedbackFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerGetFeedbackForm(requestParameters: EventFeedbackApiFeedbackControllerGetFeedbackFormRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormResponseDto> {
            return localVarFp.feedbackControllerGetFeedbackForm(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get feedback form for an event (public access with token)
         * @param {EventFeedbackApiFeedbackControllerGetFeedbackFormPublicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerGetFeedbackFormPublic(requestParameters: EventFeedbackApiFeedbackControllerGetFeedbackFormPublicRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormResponseDto> {
            return localVarFp.feedbackControllerGetFeedbackFormPublic(requestParameters.eventId, requestParameters.token, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit feedback response
         * @param {EventFeedbackApiFeedbackControllerSubmitFeedbackResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerSubmitFeedbackResponse(requestParameters: EventFeedbackApiFeedbackControllerSubmitFeedbackResponseRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackSubmissionResponseDto> {
            return localVarFp.feedbackControllerSubmitFeedbackResponse(requestParameters.submitFeedbackResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit feedback response (public access with token)
         * @param {EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerSubmitFeedbackResponsePublic(requestParameters: EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublicRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackSubmissionResponseDto> {
            return localVarFp.feedbackControllerSubmitFeedbackResponsePublic(requestParameters.token, requestParameters.userId, requestParameters.submitFeedbackResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit organizer rating (public access with token)
         * @param {EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerSubmitOrganizerRatingPublic(requestParameters: EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublicRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizerRatingResponseDto> {
            return localVarFp.feedbackControllerSubmitOrganizerRatingPublic(requestParameters.token, requestParameters.userId, requestParameters.submitOrganizerRatingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a feedback form (Admin/Staff only)
         * @param {EventFeedbackApiFeedbackControllerUpdateFeedbackFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackControllerUpdateFeedbackForm(requestParameters: EventFeedbackApiFeedbackControllerUpdateFeedbackFormRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormUpdateResponseDto> {
            return localVarFp.feedbackControllerUpdateFeedbackForm(requestParameters.formId, requestParameters.updateFeedbackFormDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventFeedbackApi - interface
 * @export
 * @interface EventFeedbackApi
 */
export interface EventFeedbackApiInterface {
    /**
     * 
     * @summary Create a feedback form for an event (Admin/Staff only)
     * @param {CreateFeedbackFormDto} createFeedbackFormDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerCreateFeedbackForm(createFeedbackFormDto: CreateFeedbackFormDto, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormResponseDto>;

    /**
     * 
     * @summary Get feedback form for an event
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerGetFeedbackForm(eventId: string, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormResponseDto>;

    /**
     * 
     * @summary Get feedback form for an event (public access with token)
     * @param {string} eventId 
     * @param {string} token JWT token for secure feedback form access
     * @param {string} userId Username of the attendee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerGetFeedbackFormPublic(eventId: string, token: string, userId: string, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormResponseDto>;

    /**
     * 
     * @summary Submit feedback response
     * @param {SubmitFeedbackResponseDto} submitFeedbackResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerSubmitFeedbackResponse(submitFeedbackResponseDto: SubmitFeedbackResponseDto, options?: AxiosRequestConfig): AxiosPromise<FeedbackSubmissionResponseDto>;

    /**
     * 
     * @summary Submit feedback response (public access with token)
     * @param {string} token JWT token for secure feedback submission
     * @param {string} userId Username of the attendee
     * @param {SubmitFeedbackResponseDto} submitFeedbackResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerSubmitFeedbackResponsePublic(token: string, userId: string, submitFeedbackResponseDto: SubmitFeedbackResponseDto, options?: AxiosRequestConfig): AxiosPromise<FeedbackSubmissionResponseDto>;

    /**
     * 
     * @summary Submit organizer rating (public access with token)
     * @param {string} token JWT token for secure organizer rating submission
     * @param {string} userId Username of the attendee
     * @param {SubmitOrganizerRatingDto} submitOrganizerRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerSubmitOrganizerRatingPublic(token: string, userId: string, submitOrganizerRatingDto: SubmitOrganizerRatingDto, options?: AxiosRequestConfig): AxiosPromise<OrganizerRatingResponseDto>;

    /**
     * 
     * @summary Update a feedback form (Admin/Staff only)
     * @param {string} formId 
     * @param {UpdateFeedbackFormDto} updateFeedbackFormDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApiInterface
     */
    feedbackControllerUpdateFeedbackForm(formId: string, updateFeedbackFormDto: UpdateFeedbackFormDto, options?: AxiosRequestConfig): AxiosPromise<FeedbackFormUpdateResponseDto>;

}

/**
 * Request parameters for feedbackControllerCreateFeedbackForm operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerCreateFeedbackFormRequest
 */
export interface EventFeedbackApiFeedbackControllerCreateFeedbackFormRequest {
    /**
     * 
     * @type {CreateFeedbackFormDto}
     * @memberof EventFeedbackApiFeedbackControllerCreateFeedbackForm
     */
    readonly createFeedbackFormDto: CreateFeedbackFormDto
}

/**
 * Request parameters for feedbackControllerGetFeedbackForm operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerGetFeedbackFormRequest
 */
export interface EventFeedbackApiFeedbackControllerGetFeedbackFormRequest {
    /**
     * 
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerGetFeedbackForm
     */
    readonly eventId: string
}

/**
 * Request parameters for feedbackControllerGetFeedbackFormPublic operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerGetFeedbackFormPublicRequest
 */
export interface EventFeedbackApiFeedbackControllerGetFeedbackFormPublicRequest {
    /**
     * 
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerGetFeedbackFormPublic
     */
    readonly eventId: string

    /**
     * JWT token for secure feedback form access
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerGetFeedbackFormPublic
     */
    readonly token: string

    /**
     * Username of the attendee
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerGetFeedbackFormPublic
     */
    readonly userId: string
}

/**
 * Request parameters for feedbackControllerSubmitFeedbackResponse operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerSubmitFeedbackResponseRequest
 */
export interface EventFeedbackApiFeedbackControllerSubmitFeedbackResponseRequest {
    /**
     * 
     * @type {SubmitFeedbackResponseDto}
     * @memberof EventFeedbackApiFeedbackControllerSubmitFeedbackResponse
     */
    readonly submitFeedbackResponseDto: SubmitFeedbackResponseDto
}

/**
 * Request parameters for feedbackControllerSubmitFeedbackResponsePublic operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublicRequest
 */
export interface EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublicRequest {
    /**
     * JWT token for secure feedback submission
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublic
     */
    readonly token: string

    /**
     * Username of the attendee
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublic
     */
    readonly userId: string

    /**
     * 
     * @type {SubmitFeedbackResponseDto}
     * @memberof EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublic
     */
    readonly submitFeedbackResponseDto: SubmitFeedbackResponseDto
}

/**
 * Request parameters for feedbackControllerSubmitOrganizerRatingPublic operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublicRequest
 */
export interface EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublicRequest {
    /**
     * JWT token for secure organizer rating submission
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublic
     */
    readonly token: string

    /**
     * Username of the attendee
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublic
     */
    readonly userId: string

    /**
     * 
     * @type {SubmitOrganizerRatingDto}
     * @memberof EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublic
     */
    readonly submitOrganizerRatingDto: SubmitOrganizerRatingDto
}

/**
 * Request parameters for feedbackControllerUpdateFeedbackForm operation in EventFeedbackApi.
 * @export
 * @interface EventFeedbackApiFeedbackControllerUpdateFeedbackFormRequest
 */
export interface EventFeedbackApiFeedbackControllerUpdateFeedbackFormRequest {
    /**
     * 
     * @type {string}
     * @memberof EventFeedbackApiFeedbackControllerUpdateFeedbackForm
     */
    readonly formId: string

    /**
     * 
     * @type {UpdateFeedbackFormDto}
     * @memberof EventFeedbackApiFeedbackControllerUpdateFeedbackForm
     */
    readonly updateFeedbackFormDto: UpdateFeedbackFormDto
}

/**
 * EventFeedbackApi - object-oriented interface
 * @export
 * @class EventFeedbackApi
 * @extends {BaseAPI}
 */
export class EventFeedbackApi extends BaseAPI implements EventFeedbackApiInterface {
    /**
     * 
     * @summary Create a feedback form for an event (Admin/Staff only)
     * @param {EventFeedbackApiFeedbackControllerCreateFeedbackFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerCreateFeedbackForm(requestParameters: EventFeedbackApiFeedbackControllerCreateFeedbackFormRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerCreateFeedbackForm(requestParameters.createFeedbackFormDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get feedback form for an event
     * @param {EventFeedbackApiFeedbackControllerGetFeedbackFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerGetFeedbackForm(requestParameters: EventFeedbackApiFeedbackControllerGetFeedbackFormRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerGetFeedbackForm(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get feedback form for an event (public access with token)
     * @param {EventFeedbackApiFeedbackControllerGetFeedbackFormPublicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerGetFeedbackFormPublic(requestParameters: EventFeedbackApiFeedbackControllerGetFeedbackFormPublicRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerGetFeedbackFormPublic(requestParameters.eventId, requestParameters.token, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit feedback response
     * @param {EventFeedbackApiFeedbackControllerSubmitFeedbackResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerSubmitFeedbackResponse(requestParameters: EventFeedbackApiFeedbackControllerSubmitFeedbackResponseRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerSubmitFeedbackResponse(requestParameters.submitFeedbackResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit feedback response (public access with token)
     * @param {EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerSubmitFeedbackResponsePublic(requestParameters: EventFeedbackApiFeedbackControllerSubmitFeedbackResponsePublicRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerSubmitFeedbackResponsePublic(requestParameters.token, requestParameters.userId, requestParameters.submitFeedbackResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit organizer rating (public access with token)
     * @param {EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerSubmitOrganizerRatingPublic(requestParameters: EventFeedbackApiFeedbackControllerSubmitOrganizerRatingPublicRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerSubmitOrganizerRatingPublic(requestParameters.token, requestParameters.userId, requestParameters.submitOrganizerRatingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a feedback form (Admin/Staff only)
     * @param {EventFeedbackApiFeedbackControllerUpdateFeedbackFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventFeedbackApi
     */
    public feedbackControllerUpdateFeedbackForm(requestParameters: EventFeedbackApiFeedbackControllerUpdateFeedbackFormRequest, options?: AxiosRequestConfig) {
        return EventFeedbackApiFp(this.configuration).feedbackControllerUpdateFeedbackForm(requestParameters.formId, requestParameters.updateFeedbackFormDto, options).then((request) => request(this.axios, this.basePath));
    }
}
