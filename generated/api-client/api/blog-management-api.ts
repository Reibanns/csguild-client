/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CategoryActionResponseDto } from '../models';
// @ts-ignore
import { CategoryListResponseDto } from '../models';
// @ts-ignore
import { TagActionResponseDto } from '../models';
// @ts-ignore
import { TagListResponseDto } from '../models';
/**
 * BlogManagementApi - axios parameter creator
 * @export
 */
export const BlogManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new blog category
         * @summary Create a new category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerCreateCategory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blog-management/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new blog tag
         * @summary Create a new tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerCreateTag: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blog-management/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing blog category
         * @summary Delete a category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerDeleteCategory: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('blogManagementControllerDeleteCategory', 'categoryId', categoryId)
            const localVarPath = `/api/blog-management/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing blog tag
         * @summary Delete a tag
         * @param {string} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerDeleteTag: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('blogManagementControllerDeleteTag', 'tagId', tagId)
            const localVarPath = `/api/blog-management/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all available blog categories with pagination
         * @summary Get all categories
         * @param {boolean} [onlyActive] Only show active categories
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerGetCategories: async (onlyActive?: boolean, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blog-management/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlyActive !== undefined) {
                localVarQueryParameter['onlyActive'] = onlyActive;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all available blog tags with pagination
         * @summary Get all tags
         * @param {boolean} [onlyPopular] Only show tags with associated blogs
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerGetTags: async (onlyPopular?: boolean, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/blog-management/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlyPopular !== undefined) {
                localVarQueryParameter['onlyPopular'] = onlyPopular;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing blog category
         * @summary Update a category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerUpdateCategory: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('blogManagementControllerUpdateCategory', 'categoryId', categoryId)
            const localVarPath = `/api/blog-management/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing blog tag
         * @summary Update a tag
         * @param {string} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerUpdateTag: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('blogManagementControllerUpdateTag', 'tagId', tagId)
            const localVarPath = `/api/blog-management/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogManagementApi - functional programming interface
 * @export
 */
export const BlogManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new blog category
         * @summary Create a new category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerCreateCategory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerCreateCategory(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new blog tag
         * @summary Create a new tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerCreateTag(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerCreateTag(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing blog category
         * @summary Delete a category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerDeleteCategory(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerDeleteCategory(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing blog tag
         * @summary Delete a tag
         * @param {string} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerDeleteTag(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerDeleteTag(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all available blog categories with pagination
         * @summary Get all categories
         * @param {boolean} [onlyActive] Only show active categories
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerGetCategories(onlyActive?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerGetCategories(onlyActive, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all available blog tags with pagination
         * @summary Get all tags
         * @param {boolean} [onlyPopular] Only show tags with associated blogs
         * @param {number} [limit] Items per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerGetTags(onlyPopular?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerGetTags(onlyPopular, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing blog category
         * @summary Update a category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerUpdateCategory(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerUpdateCategory(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing blog tag
         * @summary Update a tag
         * @param {string} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogManagementControllerUpdateTag(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogManagementControllerUpdateTag(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogManagementApi - factory interface
 * @export
 */
export const BlogManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogManagementApiFp(configuration)
    return {
        /**
         * Create a new blog category
         * @summary Create a new category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerCreateCategory(options?: AxiosRequestConfig): AxiosPromise<CategoryActionResponseDto> {
            return localVarFp.blogManagementControllerCreateCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new blog tag
         * @summary Create a new tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerCreateTag(options?: AxiosRequestConfig): AxiosPromise<TagActionResponseDto> {
            return localVarFp.blogManagementControllerCreateTag(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing blog category
         * @summary Delete a category
         * @param {BlogManagementApiBlogManagementControllerDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerDeleteCategory(requestParameters: BlogManagementApiBlogManagementControllerDeleteCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryActionResponseDto> {
            return localVarFp.blogManagementControllerDeleteCategory(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing blog tag
         * @summary Delete a tag
         * @param {BlogManagementApiBlogManagementControllerDeleteTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerDeleteTag(requestParameters: BlogManagementApiBlogManagementControllerDeleteTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagActionResponseDto> {
            return localVarFp.blogManagementControllerDeleteTag(requestParameters.tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all available blog categories with pagination
         * @summary Get all categories
         * @param {BlogManagementApiBlogManagementControllerGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerGetCategories(requestParameters: BlogManagementApiBlogManagementControllerGetCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CategoryListResponseDto> {
            return localVarFp.blogManagementControllerGetCategories(requestParameters.onlyActive, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all available blog tags with pagination
         * @summary Get all tags
         * @param {BlogManagementApiBlogManagementControllerGetTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerGetTags(requestParameters: BlogManagementApiBlogManagementControllerGetTagsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TagListResponseDto> {
            return localVarFp.blogManagementControllerGetTags(requestParameters.onlyPopular, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing blog category
         * @summary Update a category
         * @param {BlogManagementApiBlogManagementControllerUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerUpdateCategory(requestParameters: BlogManagementApiBlogManagementControllerUpdateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryActionResponseDto> {
            return localVarFp.blogManagementControllerUpdateCategory(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing blog tag
         * @summary Update a tag
         * @param {BlogManagementApiBlogManagementControllerUpdateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogManagementControllerUpdateTag(requestParameters: BlogManagementApiBlogManagementControllerUpdateTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagActionResponseDto> {
            return localVarFp.blogManagementControllerUpdateTag(requestParameters.tagId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogManagementApi - interface
 * @export
 * @interface BlogManagementApi
 */
export interface BlogManagementApiInterface {
    /**
     * Create a new blog category
     * @summary Create a new category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerCreateCategory(options?: AxiosRequestConfig): AxiosPromise<CategoryActionResponseDto>;

    /**
     * Create a new blog tag
     * @summary Create a new tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerCreateTag(options?: AxiosRequestConfig): AxiosPromise<TagActionResponseDto>;

    /**
     * Delete an existing blog category
     * @summary Delete a category
     * @param {string} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerDeleteCategory(categoryId: string, options?: AxiosRequestConfig): AxiosPromise<CategoryActionResponseDto>;

    /**
     * Delete an existing blog tag
     * @summary Delete a tag
     * @param {string} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerDeleteTag(tagId: string, options?: AxiosRequestConfig): AxiosPromise<TagActionResponseDto>;

    /**
     * Retrieve all available blog categories with pagination
     * @summary Get all categories
     * @param {boolean} [onlyActive] Only show active categories
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerGetCategories(onlyActive?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<CategoryListResponseDto>;

    /**
     * Retrieve all available blog tags with pagination
     * @summary Get all tags
     * @param {boolean} [onlyPopular] Only show tags with associated blogs
     * @param {number} [limit] Items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerGetTags(onlyPopular?: boolean, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<TagListResponseDto>;

    /**
     * Update an existing blog category
     * @summary Update a category
     * @param {string} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerUpdateCategory(categoryId: string, options?: AxiosRequestConfig): AxiosPromise<CategoryActionResponseDto>;

    /**
     * Update an existing blog tag
     * @summary Update a tag
     * @param {string} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApiInterface
     */
    blogManagementControllerUpdateTag(tagId: string, options?: AxiosRequestConfig): AxiosPromise<TagActionResponseDto>;

}

/**
 * Request parameters for blogManagementControllerDeleteCategory operation in BlogManagementApi.
 * @export
 * @interface BlogManagementApiBlogManagementControllerDeleteCategoryRequest
 */
export interface BlogManagementApiBlogManagementControllerDeleteCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogManagementApiBlogManagementControllerDeleteCategory
     */
    readonly categoryId: string
}

/**
 * Request parameters for blogManagementControllerDeleteTag operation in BlogManagementApi.
 * @export
 * @interface BlogManagementApiBlogManagementControllerDeleteTagRequest
 */
export interface BlogManagementApiBlogManagementControllerDeleteTagRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogManagementApiBlogManagementControllerDeleteTag
     */
    readonly tagId: string
}

/**
 * Request parameters for blogManagementControllerGetCategories operation in BlogManagementApi.
 * @export
 * @interface BlogManagementApiBlogManagementControllerGetCategoriesRequest
 */
export interface BlogManagementApiBlogManagementControllerGetCategoriesRequest {
    /**
     * Only show active categories
     * @type {boolean}
     * @memberof BlogManagementApiBlogManagementControllerGetCategories
     */
    readonly onlyActive?: boolean

    /**
     * Items per page
     * @type {number}
     * @memberof BlogManagementApiBlogManagementControllerGetCategories
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogManagementApiBlogManagementControllerGetCategories
     */
    readonly page?: number
}

/**
 * Request parameters for blogManagementControllerGetTags operation in BlogManagementApi.
 * @export
 * @interface BlogManagementApiBlogManagementControllerGetTagsRequest
 */
export interface BlogManagementApiBlogManagementControllerGetTagsRequest {
    /**
     * Only show tags with associated blogs
     * @type {boolean}
     * @memberof BlogManagementApiBlogManagementControllerGetTags
     */
    readonly onlyPopular?: boolean

    /**
     * Items per page
     * @type {number}
     * @memberof BlogManagementApiBlogManagementControllerGetTags
     */
    readonly limit?: number

    /**
     * Page number
     * @type {number}
     * @memberof BlogManagementApiBlogManagementControllerGetTags
     */
    readonly page?: number
}

/**
 * Request parameters for blogManagementControllerUpdateCategory operation in BlogManagementApi.
 * @export
 * @interface BlogManagementApiBlogManagementControllerUpdateCategoryRequest
 */
export interface BlogManagementApiBlogManagementControllerUpdateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogManagementApiBlogManagementControllerUpdateCategory
     */
    readonly categoryId: string
}

/**
 * Request parameters for blogManagementControllerUpdateTag operation in BlogManagementApi.
 * @export
 * @interface BlogManagementApiBlogManagementControllerUpdateTagRequest
 */
export interface BlogManagementApiBlogManagementControllerUpdateTagRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogManagementApiBlogManagementControllerUpdateTag
     */
    readonly tagId: string
}

/**
 * BlogManagementApi - object-oriented interface
 * @export
 * @class BlogManagementApi
 * @extends {BaseAPI}
 */
export class BlogManagementApi extends BaseAPI implements BlogManagementApiInterface {
    /**
     * Create a new blog category
     * @summary Create a new category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerCreateCategory(options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerCreateCategory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new blog tag
     * @summary Create a new tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerCreateTag(options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerCreateTag(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing blog category
     * @summary Delete a category
     * @param {BlogManagementApiBlogManagementControllerDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerDeleteCategory(requestParameters: BlogManagementApiBlogManagementControllerDeleteCategoryRequest, options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerDeleteCategory(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing blog tag
     * @summary Delete a tag
     * @param {BlogManagementApiBlogManagementControllerDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerDeleteTag(requestParameters: BlogManagementApiBlogManagementControllerDeleteTagRequest, options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerDeleteTag(requestParameters.tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all available blog categories with pagination
     * @summary Get all categories
     * @param {BlogManagementApiBlogManagementControllerGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerGetCategories(requestParameters: BlogManagementApiBlogManagementControllerGetCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerGetCategories(requestParameters.onlyActive, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all available blog tags with pagination
     * @summary Get all tags
     * @param {BlogManagementApiBlogManagementControllerGetTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerGetTags(requestParameters: BlogManagementApiBlogManagementControllerGetTagsRequest = {}, options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerGetTags(requestParameters.onlyPopular, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing blog category
     * @summary Update a category
     * @param {BlogManagementApiBlogManagementControllerUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerUpdateCategory(requestParameters: BlogManagementApiBlogManagementControllerUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerUpdateCategory(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing blog tag
     * @summary Update a tag
     * @param {BlogManagementApiBlogManagementControllerUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogManagementApi
     */
    public blogManagementControllerUpdateTag(requestParameters: BlogManagementApiBlogManagementControllerUpdateTagRequest, options?: AxiosRequestConfig) {
        return BlogManagementApiFp(this.configuration).blogManagementControllerUpdateTag(requestParameters.tagId, options).then((request) => request(this.axios, this.basePath));
    }
}
