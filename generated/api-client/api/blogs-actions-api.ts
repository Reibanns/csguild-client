/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BlogActionResponseDto } from '../models';
// @ts-ignore
import { BlogCreateResponseDto } from '../models';
// @ts-ignore
import { BlogUpdateResponseDto } from '../models';
// @ts-ignore
import { CreateBlogDto } from '../models';
// @ts-ignore
import { FlagBlogDto } from '../models';
// @ts-ignore
import { ShareBlogDto } from '../models';
// @ts-ignore
import { UpdateBlogDto } from '../models';
/**
 * BlogsActionsApi - axios parameter creator
 * @export
 */
export const BlogsActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a blog to user bookmarks
         * @summary Bookmark a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerBookmarkBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerBookmarkBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/bookmark`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new blog post as a draft
         * @summary Create a new blog
         * @param {CreateBlogDto} createBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerCreateBlog: async (createBlogDto: CreateBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBlogDto' is not null or undefined
            assertParamExists('blogsActionControllerCreateBlog', 'createBlogDto', createBlogDto)
            const localVarPath = `/api/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBlogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing blog post
         * @summary Delete a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerDeleteBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerDeleteBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Feature a blog post (admin only)
         * @summary Feature a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerFeatureBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerFeatureBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/feature`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flag a blog for moderation review
         * @summary Flag a blog
         * @param {string} slug Blog slug
         * @param {FlagBlogDto} flagBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerFlagBlog: async (slug: string, flagBlogDto: FlagBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerFlagBlog', 'slug', slug)
            // verify required parameter 'flagBlogDto' is not null or undefined
            assertParamExists('blogsActionControllerFlagBlog', 'flagBlogDto', flagBlogDto)
            const localVarPath = `/api/blogs/{slug}/flag`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flagBlogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a like to a blog post
         * @summary Like a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerLikeBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerLikeBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/like`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pin a blog post to make it more prominent
         * @summary Pin a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerPinBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerPinBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/pin`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a draft blog post
         * @summary Publish a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerPublishBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerPublishBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/publish`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule a blog post for future publication
         * @summary Schedule a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerScheduleBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerScheduleBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/schedule`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Record a blog share action
         * @summary Share a blog
         * @param {string} slug Blog slug
         * @param {ShareBlogDto} shareBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerShareBlog: async (slug: string, shareBlogDto: ShareBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerShareBlog', 'slug', slug)
            // verify required parameter 'shareBlogDto' is not null or undefined
            assertParamExists('blogsActionControllerShareBlog', 'shareBlogDto', shareBlogDto)
            const localVarPath = `/api/blogs/{slug}/share`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareBlogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a blog from user bookmarks
         * @summary Remove bookmark from a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnbookmarkBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerUnbookmarkBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/unbookmark`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove feature status from a blog post (admin only)
         * @summary Unfeature a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnfeatureBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerUnfeatureBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/unfeature`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a like from a blog post
         * @summary Unlike a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnlikeBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerUnlikeBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/unlike`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove pin from a blog post
         * @summary Unpin a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnpinBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerUnpinBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/unpin`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unpublish a published blog post (convert back to draft)
         * @summary Unpublish a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnpublishBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerUnpublishBlog', 'slug', slug)
            const localVarPath = `/api/blogs/{slug}/unpublish`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing blog post
         * @summary Update a blog
         * @param {string} slug Blog slug
         * @param {UpdateBlogDto} updateBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUpdateBlog: async (slug: string, updateBlogDto: UpdateBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogsActionControllerUpdateBlog', 'slug', slug)
            // verify required parameter 'updateBlogDto' is not null or undefined
            assertParamExists('blogsActionControllerUpdateBlog', 'updateBlogDto', updateBlogDto)
            const localVarPath = `/api/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBlogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogsActionsApi - functional programming interface
 * @export
 */
export const BlogsActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogsActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a blog to user bookmarks
         * @summary Bookmark a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerBookmarkBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerBookmarkBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new blog post as a draft
         * @summary Create a new blog
         * @param {CreateBlogDto} createBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerCreateBlog(createBlogDto: CreateBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerCreateBlog(createBlogDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing blog post
         * @summary Delete a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerDeleteBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerDeleteBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Feature a blog post (admin only)
         * @summary Feature a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerFeatureBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerFeatureBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Flag a blog for moderation review
         * @summary Flag a blog
         * @param {string} slug Blog slug
         * @param {FlagBlogDto} flagBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerFlagBlog(slug: string, flagBlogDto: FlagBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerFlagBlog(slug, flagBlogDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a like to a blog post
         * @summary Like a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerLikeBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerLikeBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pin a blog post to make it more prominent
         * @summary Pin a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerPinBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerPinBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a draft blog post
         * @summary Publish a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerPublishBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerPublishBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Schedule a blog post for future publication
         * @summary Schedule a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerScheduleBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerScheduleBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Record a blog share action
         * @summary Share a blog
         * @param {string} slug Blog slug
         * @param {ShareBlogDto} shareBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerShareBlog(slug: string, shareBlogDto: ShareBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerShareBlog(slug, shareBlogDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a blog from user bookmarks
         * @summary Remove bookmark from a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerUnbookmarkBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerUnbookmarkBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove feature status from a blog post (admin only)
         * @summary Unfeature a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerUnfeatureBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerUnfeatureBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a like from a blog post
         * @summary Unlike a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerUnlikeBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerUnlikeBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove pin from a blog post
         * @summary Unpin a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerUnpinBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerUnpinBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unpublish a published blog post (convert back to draft)
         * @summary Unpublish a blog
         * @param {string} slug Blog slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerUnpublishBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerUnpublishBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing blog post
         * @summary Update a blog
         * @param {string} slug Blog slug
         * @param {UpdateBlogDto} updateBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogsActionControllerUpdateBlog(slug: string, updateBlogDto: UpdateBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogUpdateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogsActionControllerUpdateBlog(slug, updateBlogDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogsActionsApi - factory interface
 * @export
 */
export const BlogsActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogsActionsApiFp(configuration)
    return {
        /**
         * Add a blog to user bookmarks
         * @summary Bookmark a blog
         * @param {BlogsActionsApiBlogsActionControllerBookmarkBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerBookmarkBlog(requestParameters: BlogsActionsApiBlogsActionControllerBookmarkBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerBookmarkBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new blog post as a draft
         * @summary Create a new blog
         * @param {BlogsActionsApiBlogsActionControllerCreateBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerCreateBlog(requestParameters: BlogsActionsApiBlogsActionControllerCreateBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogCreateResponseDto> {
            return localVarFp.blogsActionControllerCreateBlog(requestParameters.createBlogDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing blog post
         * @summary Delete a blog
         * @param {BlogsActionsApiBlogsActionControllerDeleteBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerDeleteBlog(requestParameters: BlogsActionsApiBlogsActionControllerDeleteBlogRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.blogsActionControllerDeleteBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Feature a blog post (admin only)
         * @summary Feature a blog
         * @param {BlogsActionsApiBlogsActionControllerFeatureBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerFeatureBlog(requestParameters: BlogsActionsApiBlogsActionControllerFeatureBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerFeatureBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Flag a blog for moderation review
         * @summary Flag a blog
         * @param {BlogsActionsApiBlogsActionControllerFlagBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerFlagBlog(requestParameters: BlogsActionsApiBlogsActionControllerFlagBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerFlagBlog(requestParameters.slug, requestParameters.flagBlogDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a like to a blog post
         * @summary Like a blog
         * @param {BlogsActionsApiBlogsActionControllerLikeBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerLikeBlog(requestParameters: BlogsActionsApiBlogsActionControllerLikeBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerLikeBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Pin a blog post to make it more prominent
         * @summary Pin a blog
         * @param {BlogsActionsApiBlogsActionControllerPinBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerPinBlog(requestParameters: BlogsActionsApiBlogsActionControllerPinBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerPinBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a draft blog post
         * @summary Publish a blog
         * @param {BlogsActionsApiBlogsActionControllerPublishBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerPublishBlog(requestParameters: BlogsActionsApiBlogsActionControllerPublishBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerPublishBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Schedule a blog post for future publication
         * @summary Schedule a blog
         * @param {BlogsActionsApiBlogsActionControllerScheduleBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerScheduleBlog(requestParameters: BlogsActionsApiBlogsActionControllerScheduleBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerScheduleBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Record a blog share action
         * @summary Share a blog
         * @param {BlogsActionsApiBlogsActionControllerShareBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerShareBlog(requestParameters: BlogsActionsApiBlogsActionControllerShareBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerShareBlog(requestParameters.slug, requestParameters.shareBlogDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a blog from user bookmarks
         * @summary Remove bookmark from a blog
         * @param {BlogsActionsApiBlogsActionControllerUnbookmarkBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnbookmarkBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnbookmarkBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerUnbookmarkBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove feature status from a blog post (admin only)
         * @summary Unfeature a blog
         * @param {BlogsActionsApiBlogsActionControllerUnfeatureBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnfeatureBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnfeatureBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerUnfeatureBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a like from a blog post
         * @summary Unlike a blog
         * @param {BlogsActionsApiBlogsActionControllerUnlikeBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnlikeBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnlikeBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerUnlikeBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove pin from a blog post
         * @summary Unpin a blog
         * @param {BlogsActionsApiBlogsActionControllerUnpinBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnpinBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnpinBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerUnpinBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Unpublish a published blog post (convert back to draft)
         * @summary Unpublish a blog
         * @param {BlogsActionsApiBlogsActionControllerUnpublishBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUnpublishBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnpublishBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto> {
            return localVarFp.blogsActionControllerUnpublishBlog(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing blog post
         * @summary Update a blog
         * @param {BlogsActionsApiBlogsActionControllerUpdateBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogsActionControllerUpdateBlog(requestParameters: BlogsActionsApiBlogsActionControllerUpdateBlogRequest, options?: AxiosRequestConfig): AxiosPromise<BlogUpdateResponseDto> {
            return localVarFp.blogsActionControllerUpdateBlog(requestParameters.slug, requestParameters.updateBlogDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogsActionsApi - interface
 * @export
 * @interface BlogsActionsApi
 */
export interface BlogsActionsApiInterface {
    /**
     * Add a blog to user bookmarks
     * @summary Bookmark a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerBookmarkBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Create a new blog post as a draft
     * @summary Create a new blog
     * @param {CreateBlogDto} createBlogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerCreateBlog(createBlogDto: CreateBlogDto, options?: AxiosRequestConfig): AxiosPromise<BlogCreateResponseDto>;

    /**
     * Delete an existing blog post
     * @summary Delete a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerDeleteBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Feature a blog post (admin only)
     * @summary Feature a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerFeatureBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Flag a blog for moderation review
     * @summary Flag a blog
     * @param {string} slug Blog slug
     * @param {FlagBlogDto} flagBlogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerFlagBlog(slug: string, flagBlogDto: FlagBlogDto, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Add a like to a blog post
     * @summary Like a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerLikeBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Pin a blog post to make it more prominent
     * @summary Pin a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerPinBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Publish a draft blog post
     * @summary Publish a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerPublishBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Schedule a blog post for future publication
     * @summary Schedule a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerScheduleBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Record a blog share action
     * @summary Share a blog
     * @param {string} slug Blog slug
     * @param {ShareBlogDto} shareBlogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerShareBlog(slug: string, shareBlogDto: ShareBlogDto, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Remove a blog from user bookmarks
     * @summary Remove bookmark from a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerUnbookmarkBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Remove feature status from a blog post (admin only)
     * @summary Unfeature a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerUnfeatureBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Remove a like from a blog post
     * @summary Unlike a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerUnlikeBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Remove pin from a blog post
     * @summary Unpin a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerUnpinBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Unpublish a published blog post (convert back to draft)
     * @summary Unpublish a blog
     * @param {string} slug Blog slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerUnpublishBlog(slug: string, options?: AxiosRequestConfig): AxiosPromise<BlogActionResponseDto>;

    /**
     * Update an existing blog post
     * @summary Update a blog
     * @param {string} slug Blog slug
     * @param {UpdateBlogDto} updateBlogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApiInterface
     */
    blogsActionControllerUpdateBlog(slug: string, updateBlogDto: UpdateBlogDto, options?: AxiosRequestConfig): AxiosPromise<BlogUpdateResponseDto>;

}

/**
 * Request parameters for blogsActionControllerBookmarkBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerBookmarkBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerBookmarkBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerBookmarkBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerCreateBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerCreateBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerCreateBlogRequest {
    /**
     * 
     * @type {CreateBlogDto}
     * @memberof BlogsActionsApiBlogsActionControllerCreateBlog
     */
    readonly createBlogDto: CreateBlogDto
}

/**
 * Request parameters for blogsActionControllerDeleteBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerDeleteBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerDeleteBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerDeleteBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerFeatureBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerFeatureBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerFeatureBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerFeatureBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerFlagBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerFlagBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerFlagBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerFlagBlog
     */
    readonly slug: string

    /**
     * 
     * @type {FlagBlogDto}
     * @memberof BlogsActionsApiBlogsActionControllerFlagBlog
     */
    readonly flagBlogDto: FlagBlogDto
}

/**
 * Request parameters for blogsActionControllerLikeBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerLikeBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerLikeBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerLikeBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerPinBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerPinBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerPinBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerPinBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerPublishBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerPublishBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerPublishBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerPublishBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerScheduleBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerScheduleBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerScheduleBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerScheduleBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerShareBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerShareBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerShareBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerShareBlog
     */
    readonly slug: string

    /**
     * 
     * @type {ShareBlogDto}
     * @memberof BlogsActionsApiBlogsActionControllerShareBlog
     */
    readonly shareBlogDto: ShareBlogDto
}

/**
 * Request parameters for blogsActionControllerUnbookmarkBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerUnbookmarkBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerUnbookmarkBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerUnbookmarkBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerUnfeatureBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerUnfeatureBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerUnfeatureBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerUnfeatureBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerUnlikeBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerUnlikeBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerUnlikeBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerUnlikeBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerUnpinBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerUnpinBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerUnpinBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerUnpinBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerUnpublishBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerUnpublishBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerUnpublishBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerUnpublishBlog
     */
    readonly slug: string
}

/**
 * Request parameters for blogsActionControllerUpdateBlog operation in BlogsActionsApi.
 * @export
 * @interface BlogsActionsApiBlogsActionControllerUpdateBlogRequest
 */
export interface BlogsActionsApiBlogsActionControllerUpdateBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogsActionsApiBlogsActionControllerUpdateBlog
     */
    readonly slug: string

    /**
     * 
     * @type {UpdateBlogDto}
     * @memberof BlogsActionsApiBlogsActionControllerUpdateBlog
     */
    readonly updateBlogDto: UpdateBlogDto
}

/**
 * BlogsActionsApi - object-oriented interface
 * @export
 * @class BlogsActionsApi
 * @extends {BaseAPI}
 */
export class BlogsActionsApi extends BaseAPI implements BlogsActionsApiInterface {
    /**
     * Add a blog to user bookmarks
     * @summary Bookmark a blog
     * @param {BlogsActionsApiBlogsActionControllerBookmarkBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerBookmarkBlog(requestParameters: BlogsActionsApiBlogsActionControllerBookmarkBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerBookmarkBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new blog post as a draft
     * @summary Create a new blog
     * @param {BlogsActionsApiBlogsActionControllerCreateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerCreateBlog(requestParameters: BlogsActionsApiBlogsActionControllerCreateBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerCreateBlog(requestParameters.createBlogDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing blog post
     * @summary Delete a blog
     * @param {BlogsActionsApiBlogsActionControllerDeleteBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerDeleteBlog(requestParameters: BlogsActionsApiBlogsActionControllerDeleteBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerDeleteBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Feature a blog post (admin only)
     * @summary Feature a blog
     * @param {BlogsActionsApiBlogsActionControllerFeatureBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerFeatureBlog(requestParameters: BlogsActionsApiBlogsActionControllerFeatureBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerFeatureBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flag a blog for moderation review
     * @summary Flag a blog
     * @param {BlogsActionsApiBlogsActionControllerFlagBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerFlagBlog(requestParameters: BlogsActionsApiBlogsActionControllerFlagBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerFlagBlog(requestParameters.slug, requestParameters.flagBlogDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a like to a blog post
     * @summary Like a blog
     * @param {BlogsActionsApiBlogsActionControllerLikeBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerLikeBlog(requestParameters: BlogsActionsApiBlogsActionControllerLikeBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerLikeBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pin a blog post to make it more prominent
     * @summary Pin a blog
     * @param {BlogsActionsApiBlogsActionControllerPinBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerPinBlog(requestParameters: BlogsActionsApiBlogsActionControllerPinBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerPinBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a draft blog post
     * @summary Publish a blog
     * @param {BlogsActionsApiBlogsActionControllerPublishBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerPublishBlog(requestParameters: BlogsActionsApiBlogsActionControllerPublishBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerPublishBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Schedule a blog post for future publication
     * @summary Schedule a blog
     * @param {BlogsActionsApiBlogsActionControllerScheduleBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerScheduleBlog(requestParameters: BlogsActionsApiBlogsActionControllerScheduleBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerScheduleBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Record a blog share action
     * @summary Share a blog
     * @param {BlogsActionsApiBlogsActionControllerShareBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerShareBlog(requestParameters: BlogsActionsApiBlogsActionControllerShareBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerShareBlog(requestParameters.slug, requestParameters.shareBlogDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a blog from user bookmarks
     * @summary Remove bookmark from a blog
     * @param {BlogsActionsApiBlogsActionControllerUnbookmarkBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerUnbookmarkBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnbookmarkBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerUnbookmarkBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove feature status from a blog post (admin only)
     * @summary Unfeature a blog
     * @param {BlogsActionsApiBlogsActionControllerUnfeatureBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerUnfeatureBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnfeatureBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerUnfeatureBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a like from a blog post
     * @summary Unlike a blog
     * @param {BlogsActionsApiBlogsActionControllerUnlikeBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerUnlikeBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnlikeBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerUnlikeBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove pin from a blog post
     * @summary Unpin a blog
     * @param {BlogsActionsApiBlogsActionControllerUnpinBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerUnpinBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnpinBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerUnpinBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unpublish a published blog post (convert back to draft)
     * @summary Unpublish a blog
     * @param {BlogsActionsApiBlogsActionControllerUnpublishBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerUnpublishBlog(requestParameters: BlogsActionsApiBlogsActionControllerUnpublishBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerUnpublishBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing blog post
     * @summary Update a blog
     * @param {BlogsActionsApiBlogsActionControllerUpdateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsActionsApi
     */
    public blogsActionControllerUpdateBlog(requestParameters: BlogsActionsApiBlogsActionControllerUpdateBlogRequest, options?: AxiosRequestConfig) {
        return BlogsActionsApiFp(this.configuration).blogsActionControllerUpdateBlog(requestParameters.slug, requestParameters.updateBlogDto, options).then((request) => request(this.axios, this.basePath));
    }
}
