/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PinProjectErrorResponseDto } from '../models';
// @ts-ignore
import { PinProjectResponseDto } from '../models';
// @ts-ignore
import { UnpinProjectErrorResponseDto } from '../models';
// @ts-ignore
import { UnpinProjectResponseDto } from '../models';
/**
 * ProjectsAdminApi - axios parameter creator
 * @export
 */
export const ProjectsAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Pin a project to make it globally visible to all users. Only administrators can pin projects. Maximum of 6 projects can be pinned at once.
         * @summary Pin a project (Admin only)
         * @param {string} slug Project slug to pin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAdminControllerPinProject: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsAdminControllerPinProject', 'slug', slug)
            const localVarPath = `/api/admin/projects/{slug}/pin`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a project from the globally pinned projects list. Only administrators can unpin projects.
         * @summary Unpin a project (Admin only)
         * @param {string} slug Project slug to unpin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAdminControllerUnpinProject: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsAdminControllerUnpinProject', 'slug', slug)
            const localVarPath = `/api/admin/projects/{slug}/unpin`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsAdminApi - functional programming interface
 * @export
 */
export const ProjectsAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Pin a project to make it globally visible to all users. Only administrators can pin projects. Maximum of 6 projects can be pinned at once.
         * @summary Pin a project (Admin only)
         * @param {string} slug Project slug to pin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsAdminControllerPinProject(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PinProjectResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsAdminControllerPinProject(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a project from the globally pinned projects list. Only administrators can unpin projects.
         * @summary Unpin a project (Admin only)
         * @param {string} slug Project slug to unpin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsAdminControllerUnpinProject(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnpinProjectResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsAdminControllerUnpinProject(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsAdminApi - factory interface
 * @export
 */
export const ProjectsAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsAdminApiFp(configuration)
    return {
        /**
         * Pin a project to make it globally visible to all users. Only administrators can pin projects. Maximum of 6 projects can be pinned at once.
         * @summary Pin a project (Admin only)
         * @param {ProjectsAdminApiProjectsAdminControllerPinProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAdminControllerPinProject(requestParameters: ProjectsAdminApiProjectsAdminControllerPinProjectRequest, options?: AxiosRequestConfig): AxiosPromise<PinProjectResponseDto> {
            return localVarFp.projectsAdminControllerPinProject(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a project from the globally pinned projects list. Only administrators can unpin projects.
         * @summary Unpin a project (Admin only)
         * @param {ProjectsAdminApiProjectsAdminControllerUnpinProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAdminControllerUnpinProject(requestParameters: ProjectsAdminApiProjectsAdminControllerUnpinProjectRequest, options?: AxiosRequestConfig): AxiosPromise<UnpinProjectResponseDto> {
            return localVarFp.projectsAdminControllerUnpinProject(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsAdminApi - interface
 * @export
 * @interface ProjectsAdminApi
 */
export interface ProjectsAdminApiInterface {
    /**
     * Pin a project to make it globally visible to all users. Only administrators can pin projects. Maximum of 6 projects can be pinned at once.
     * @summary Pin a project (Admin only)
     * @param {string} slug Project slug to pin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsAdminApiInterface
     */
    projectsAdminControllerPinProject(slug: string, options?: AxiosRequestConfig): AxiosPromise<PinProjectResponseDto>;

    /**
     * Remove a project from the globally pinned projects list. Only administrators can unpin projects.
     * @summary Unpin a project (Admin only)
     * @param {string} slug Project slug to unpin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsAdminApiInterface
     */
    projectsAdminControllerUnpinProject(slug: string, options?: AxiosRequestConfig): AxiosPromise<UnpinProjectResponseDto>;

}

/**
 * Request parameters for projectsAdminControllerPinProject operation in ProjectsAdminApi.
 * @export
 * @interface ProjectsAdminApiProjectsAdminControllerPinProjectRequest
 */
export interface ProjectsAdminApiProjectsAdminControllerPinProjectRequest {
    /**
     * Project slug to pin
     * @type {string}
     * @memberof ProjectsAdminApiProjectsAdminControllerPinProject
     */
    readonly slug: string
}

/**
 * Request parameters for projectsAdminControllerUnpinProject operation in ProjectsAdminApi.
 * @export
 * @interface ProjectsAdminApiProjectsAdminControllerUnpinProjectRequest
 */
export interface ProjectsAdminApiProjectsAdminControllerUnpinProjectRequest {
    /**
     * Project slug to unpin
     * @type {string}
     * @memberof ProjectsAdminApiProjectsAdminControllerUnpinProject
     */
    readonly slug: string
}

/**
 * ProjectsAdminApi - object-oriented interface
 * @export
 * @class ProjectsAdminApi
 * @extends {BaseAPI}
 */
export class ProjectsAdminApi extends BaseAPI implements ProjectsAdminApiInterface {
    /**
     * Pin a project to make it globally visible to all users. Only administrators can pin projects. Maximum of 6 projects can be pinned at once.
     * @summary Pin a project (Admin only)
     * @param {ProjectsAdminApiProjectsAdminControllerPinProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsAdminApi
     */
    public projectsAdminControllerPinProject(requestParameters: ProjectsAdminApiProjectsAdminControllerPinProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsAdminApiFp(this.configuration).projectsAdminControllerPinProject(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a project from the globally pinned projects list. Only administrators can unpin projects.
     * @summary Unpin a project (Admin only)
     * @param {ProjectsAdminApiProjectsAdminControllerUnpinProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsAdminApi
     */
    public projectsAdminControllerUnpinProject(requestParameters: ProjectsAdminApiProjectsAdminControllerUnpinProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsAdminApiFp(this.configuration).projectsAdminControllerUnpinProject(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
}
