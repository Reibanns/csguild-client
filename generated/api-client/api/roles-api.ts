/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateRoleDto } from '../models';
// @ts-ignore
import { CreateRoleResponseDto } from '../models';
// @ts-ignore
import { RoleListResponseDto } from '../models';
// @ts-ignore
import { RoleResponseDto } from '../models';
// @ts-ignore
import { UpdateRoleDto } from '../models';
// @ts-ignore
import { UpdateRoleResponseDto } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user role. Only staff and admin users can create roles.
         * @summary Create a new role
         * @param {CreateRoleDto} createRoleDto Role creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesCommandControllerCreate: async (createRoleDto: CreateRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDto' is not null or undefined
            assertParamExists('rolesCommandControllerCreate', 'createRoleDto', createRoleDto)
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a role permanently. Only staff and admin users can delete roles. Roles that are assigned to users or projects cannot be deleted.
         * @summary Delete a role
         * @param {string} slug Role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesCommandControllerRemove: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('rolesCommandControllerRemove', 'slug', slug)
            const localVarPath = `/api/roles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update role details. Only staff and admin users can update roles.
         * @summary Update a role
         * @param {string} slug Role slug
         * @param {UpdateRoleDto} updateRoleDto Role update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesCommandControllerUpdate: async (slug: string, updateRoleDto: UpdateRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('rolesCommandControllerUpdate', 'slug', slug)
            // verify required parameter 'updateRoleDto' is not null or undefined
            assertParamExists('rolesCommandControllerUpdate', 'updateRoleDto', updateRoleDto)
            const localVarPath = `/api/roles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of roles with optional filtering by search term. No authentication required.
         * @summary Get all roles with filtering and pagination
         * @param {string} [search] Search in role name, slug, and description
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'name' | 'slug'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesQueryControllerFindAll: async (search?: string, sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'name' | 'slug', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific role by its slug. No authentication required.
         * @summary Get a role by slug
         * @param {string} slug Role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesQueryControllerFindBySlug: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('rolesQueryControllerFindBySlug', 'slug', slug)
            const localVarPath = `/api/roles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user role. Only staff and admin users can create roles.
         * @summary Create a new role
         * @param {CreateRoleDto} createRoleDto Role creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesCommandControllerCreate(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoleResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesCommandControllerCreate(createRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a role permanently. Only staff and admin users can delete roles. Roles that are assigned to users or projects cannot be deleted.
         * @summary Delete a role
         * @param {string} slug Role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesCommandControllerRemove(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesCommandControllerRemove(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update role details. Only staff and admin users can update roles.
         * @summary Update a role
         * @param {string} slug Role slug
         * @param {UpdateRoleDto} updateRoleDto Role update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesCommandControllerUpdate(slug: string, updateRoleDto: UpdateRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateRoleResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesCommandControllerUpdate(slug, updateRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a paginated list of roles with optional filtering by search term. No authentication required.
         * @summary Get all roles with filtering and pagination
         * @param {string} [search] Search in role name, slug, and description
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'name' | 'slug'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesQueryControllerFindAll(search?: string, sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'name' | 'slug', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesQueryControllerFindAll(search, sortOrder, sortBy, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve detailed information about a specific role by its slug. No authentication required.
         * @summary Get a role by slug
         * @param {string} slug Role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesQueryControllerFindBySlug(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesQueryControllerFindBySlug(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * Create a new user role. Only staff and admin users can create roles.
         * @summary Create a new role
         * @param {RolesApiRolesCommandControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesCommandControllerCreate(requestParameters: RolesApiRolesCommandControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<CreateRoleResponseDto> {
            return localVarFp.rolesCommandControllerCreate(requestParameters.createRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a role permanently. Only staff and admin users can delete roles. Roles that are assigned to users or projects cannot be deleted.
         * @summary Delete a role
         * @param {RolesApiRolesCommandControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesCommandControllerRemove(requestParameters: RolesApiRolesCommandControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rolesCommandControllerRemove(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update role details. Only staff and admin users can update roles.
         * @summary Update a role
         * @param {RolesApiRolesCommandControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesCommandControllerUpdate(requestParameters: RolesApiRolesCommandControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateRoleResponseDto> {
            return localVarFp.rolesCommandControllerUpdate(requestParameters.slug, requestParameters.updateRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of roles with optional filtering by search term. No authentication required.
         * @summary Get all roles with filtering and pagination
         * @param {RolesApiRolesQueryControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesQueryControllerFindAll(requestParameters: RolesApiRolesQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleListResponseDto> {
            return localVarFp.rolesQueryControllerFindAll(requestParameters.search, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific role by its slug. No authentication required.
         * @summary Get a role by slug
         * @param {RolesApiRolesQueryControllerFindBySlugRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesQueryControllerFindBySlug(requestParameters: RolesApiRolesQueryControllerFindBySlugRequest, options?: AxiosRequestConfig): AxiosPromise<RoleResponseDto> {
            return localVarFp.rolesQueryControllerFindBySlug(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - interface
 * @export
 * @interface RolesApi
 */
export interface RolesApiInterface {
    /**
     * Create a new user role. Only staff and admin users can create roles.
     * @summary Create a new role
     * @param {CreateRoleDto} createRoleDto Role creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    rolesCommandControllerCreate(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig): AxiosPromise<CreateRoleResponseDto>;

    /**
     * Delete a role permanently. Only staff and admin users can delete roles. Roles that are assigned to users or projects cannot be deleted.
     * @summary Delete a role
     * @param {string} slug Role slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    rolesCommandControllerRemove(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update role details. Only staff and admin users can update roles.
     * @summary Update a role
     * @param {string} slug Role slug
     * @param {UpdateRoleDto} updateRoleDto Role update data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    rolesCommandControllerUpdate(slug: string, updateRoleDto: UpdateRoleDto, options?: AxiosRequestConfig): AxiosPromise<UpdateRoleResponseDto>;

    /**
     * Retrieve a paginated list of roles with optional filtering by search term. No authentication required.
     * @summary Get all roles with filtering and pagination
     * @param {string} [search] Search in role name, slug, and description
     * @param {'asc' | 'desc'} [sortOrder] Sort direction
     * @param {'createdAt' | 'updatedAt' | 'name' | 'slug'} [sortBy] Field to sort by
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    rolesQueryControllerFindAll(search?: string, sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'name' | 'slug', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<RoleListResponseDto>;

    /**
     * Retrieve detailed information about a specific role by its slug. No authentication required.
     * @summary Get a role by slug
     * @param {string} slug Role slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    rolesQueryControllerFindBySlug(slug: string, options?: AxiosRequestConfig): AxiosPromise<RoleResponseDto>;

}

/**
 * Request parameters for rolesCommandControllerCreate operation in RolesApi.
 * @export
 * @interface RolesApiRolesCommandControllerCreateRequest
 */
export interface RolesApiRolesCommandControllerCreateRequest {
    /**
     * Role creation data
     * @type {CreateRoleDto}
     * @memberof RolesApiRolesCommandControllerCreate
     */
    readonly createRoleDto: CreateRoleDto
}

/**
 * Request parameters for rolesCommandControllerRemove operation in RolesApi.
 * @export
 * @interface RolesApiRolesCommandControllerRemoveRequest
 */
export interface RolesApiRolesCommandControllerRemoveRequest {
    /**
     * Role slug
     * @type {string}
     * @memberof RolesApiRolesCommandControllerRemove
     */
    readonly slug: string
}

/**
 * Request parameters for rolesCommandControllerUpdate operation in RolesApi.
 * @export
 * @interface RolesApiRolesCommandControllerUpdateRequest
 */
export interface RolesApiRolesCommandControllerUpdateRequest {
    /**
     * Role slug
     * @type {string}
     * @memberof RolesApiRolesCommandControllerUpdate
     */
    readonly slug: string

    /**
     * Role update data
     * @type {UpdateRoleDto}
     * @memberof RolesApiRolesCommandControllerUpdate
     */
    readonly updateRoleDto: UpdateRoleDto
}

/**
 * Request parameters for rolesQueryControllerFindAll operation in RolesApi.
 * @export
 * @interface RolesApiRolesQueryControllerFindAllRequest
 */
export interface RolesApiRolesQueryControllerFindAllRequest {
    /**
     * Search in role name, slug, and description
     * @type {string}
     * @memberof RolesApiRolesQueryControllerFindAll
     */
    readonly search?: string

    /**
     * Sort direction
     * @type {'asc' | 'desc'}
     * @memberof RolesApiRolesQueryControllerFindAll
     */
    readonly sortOrder?: 'asc' | 'desc'

    /**
     * Field to sort by
     * @type {'createdAt' | 'updatedAt' | 'name' | 'slug'}
     * @memberof RolesApiRolesQueryControllerFindAll
     */
    readonly sortBy?: 'createdAt' | 'updatedAt' | 'name' | 'slug'

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof RolesApiRolesQueryControllerFindAll
     */
    readonly limit?: number

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof RolesApiRolesQueryControllerFindAll
     */
    readonly page?: number
}

/**
 * Request parameters for rolesQueryControllerFindBySlug operation in RolesApi.
 * @export
 * @interface RolesApiRolesQueryControllerFindBySlugRequest
 */
export interface RolesApiRolesQueryControllerFindBySlugRequest {
    /**
     * Role slug
     * @type {string}
     * @memberof RolesApiRolesQueryControllerFindBySlug
     */
    readonly slug: string
}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI implements RolesApiInterface {
    /**
     * Create a new user role. Only staff and admin users can create roles.
     * @summary Create a new role
     * @param {RolesApiRolesCommandControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesCommandControllerCreate(requestParameters: RolesApiRolesCommandControllerCreateRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesCommandControllerCreate(requestParameters.createRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a role permanently. Only staff and admin users can delete roles. Roles that are assigned to users or projects cannot be deleted.
     * @summary Delete a role
     * @param {RolesApiRolesCommandControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesCommandControllerRemove(requestParameters: RolesApiRolesCommandControllerRemoveRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesCommandControllerRemove(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update role details. Only staff and admin users can update roles.
     * @summary Update a role
     * @param {RolesApiRolesCommandControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesCommandControllerUpdate(requestParameters: RolesApiRolesCommandControllerUpdateRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesCommandControllerUpdate(requestParameters.slug, requestParameters.updateRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of roles with optional filtering by search term. No authentication required.
     * @summary Get all roles with filtering and pagination
     * @param {RolesApiRolesQueryControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesQueryControllerFindAll(requestParameters: RolesApiRolesQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesQueryControllerFindAll(requestParameters.search, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific role by its slug. No authentication required.
     * @summary Get a role by slug
     * @param {RolesApiRolesQueryControllerFindBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesQueryControllerFindBySlug(requestParameters: RolesApiRolesQueryControllerFindBySlugRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesQueryControllerFindBySlug(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
}
