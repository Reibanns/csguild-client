/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateEventDto } from '../models';
// @ts-ignore
import { EventCreateResponseDto } from '../models';
// @ts-ignore
import { EventDeleteResponseDto } from '../models';
// @ts-ignore
import { EventDetailResponseDto } from '../models';
// @ts-ignore
import { EventListResponseDto } from '../models';
// @ts-ignore
import { EventRegistrationResponseDto } from '../models';
// @ts-ignore
import { EventUpdateResponseDto } from '../models';
// @ts-ignore
import { EventsQueryControllerGetEventAttendees200Response } from '../models';
// @ts-ignore
import { FeedbackStatusResponseDto } from '../models';
// @ts-ignore
import { OrganizerRatingResponseDto } from '../models';
// @ts-ignore
import { OrganizerStatisticsResponseDto } from '../models';
// @ts-ignore
import { SubmitOrganizerRatingDto } from '../models';
// @ts-ignore
import { ToggleSessionDto } from '../models';
// @ts-ignore
import { UpdateEventDto } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new event. Only authenticated users can create events.
         * @summary Create a new event
         * @param {CreateEventDto} createEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerCreate: async (createEventDto: CreateEventDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEventDto' is not null or undefined
            assertParamExists('eventsCommandControllerCreate', 'createEventDto', createEventDto)
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an event. Only the event organizer can delete the event.
         * @summary Delete an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerDelete: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsCommandControllerDelete', 'slug', slug)
            const localVarPath = `/api/events/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a rating for the event organizer. Only eligible attendees can rate.
         * @summary Rate event organizer
         * @param {string} slug Event slug
         * @param {SubmitOrganizerRatingDto} submitOrganizerRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerRateOrganizer: async (slug: string, submitOrganizerRatingDto: SubmitOrganizerRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsCommandControllerRateOrganizer', 'slug', slug)
            // verify required parameter 'submitOrganizerRatingDto' is not null or undefined
            assertParamExists('eventsCommandControllerRateOrganizer', 'submitOrganizerRatingDto', submitOrganizerRatingDto)
            const localVarPath = `/api/events/{slug}/rate-organizer`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitOrganizerRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a user for an event using event slug and username. Only authenticated users can register for events.
         * @summary Register for an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerRegisterToEvent: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsCommandControllerRegisterToEvent', 'slug', slug)
            const localVarPath = `/api/events/{slug}/register`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle event session for a user by RFID. Automatically checks if it is a check-in or check-out.
         * @summary Toggle event session (check-in/check-out)
         * @param {ToggleSessionDto} toggleSessionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerToggleSession: async (toggleSessionDto: ToggleSessionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toggleSessionDto' is not null or undefined
            assertParamExists('eventsCommandControllerToggleSession', 'toggleSessionDto', toggleSessionDto)
            const localVarPath = `/api/events/sessions/toggle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleSessionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an event. Only the event organizer can update the event.
         * @summary Update an event
         * @param {string} slug Event slug
         * @param {UpdateEventDto} updateEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerUpdate: async (slug: string, updateEventDto: UpdateEventDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsCommandControllerUpdate', 'slug', slug)
            // verify required parameter 'updateEventDto' is not null or undefined
            assertParamExists('eventsCommandControllerUpdate', 'updateEventDto', updateEventDto)
            const localVarPath = `/api/events/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEventDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user has already submitted feedback for a specific event.
         * @summary Check if user has submitted feedback for an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerCheckFeedbackResponse: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsQueryControllerCheckFeedbackResponse', 'slug', slug)
            const localVarPath = `/api/events/{slug}/feedback/status`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of events with optional filtering by search term, tags, organizer, and pinned status.
         * @summary Get all events with filtering and pagination
         * @param {string} [search] Search in event title and description
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {string} [organizerSlug] Filter by event organizer username
         * @param {boolean} [pinned] Filter to show only pinned events
         * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerFindAll: async (search?: string, tags?: string, organizerSlug?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (organizerSlug !== undefined) {
                localVarQueryParameter['organizerSlug'] = organizerSlug;
            }

            if (pinned !== undefined) {
                localVarQueryParameter['pinned'] = pinned;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific event
         * @summary Get an event by slug
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerFindOne: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsQueryControllerFindOne', 'slug', slug)
            const localVarPath = `/api/events/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all attendees for a specific event with their basic information and attendance stats.
         * @summary Get event attendees
         * @param {string} eventId Event ID
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetEventAttendees: async (eventId: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('eventsQueryControllerGetEventAttendees', 'eventId', eventId)
            const localVarPath = `/api/events/{eventId}/attendees`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all attendees and their sessions for a specific event. Requires authentication.
         * @summary Get event sessions by event slug
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetEventSessions: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsQueryControllerGetEventSessions', 'slug', slug)
            const localVarPath = `/api/events/sessions/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve events that the current user has attended with filtering and pagination.
         * @summary Get events attended by current user
         * @param {string} [search] Search in event title and description
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {string} [organizerSlug] Filter by event organizer username
         * @param {boolean} [pinned] Filter to show only pinned events
         * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetMyAttendedEvents: async (search?: string, tags?: string, organizerSlug?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/my-attended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (organizerSlug !== undefined) {
                localVarQueryParameter['organizerSlug'] = organizerSlug;
            }

            if (pinned !== undefined) {
                localVarQueryParameter['pinned'] = pinned;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve events that the current user has created with filtering and pagination.
         * @summary Get events created by current user
         * @param {string} [search] Search in event title and description
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {boolean} [pinned] Filter to show only pinned events
         * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetMyCreatedEvents: async (search?: string, tags?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/my-created`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (pinned !== undefined) {
                localVarQueryParameter['pinned'] = pinned;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve comprehensive statistics for an event organizer including total events, ratings, and recent events.
         * @summary Get organizer statistics
         * @param {string} username Username of the organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetOrganizerStatistics: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('eventsQueryControllerGetOrganizerStatistics', 'username', username)
            const localVarPath = `/api/events/organizer/{username}/statistics`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all events that are currently pinned (no pagination).
         * @summary Get all pinned events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetPinnedEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/pinned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new event. Only authenticated users can create events.
         * @summary Create a new event
         * @param {CreateEventDto} createEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCommandControllerCreate(createEventDto: CreateEventDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCommandControllerCreate(createEventDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an event. Only the event organizer can delete the event.
         * @summary Delete an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCommandControllerDelete(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDeleteResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCommandControllerDelete(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submit a rating for the event organizer. Only eligible attendees can rate.
         * @summary Rate event organizer
         * @param {string} slug Event slug
         * @param {SubmitOrganizerRatingDto} submitOrganizerRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCommandControllerRateOrganizer(slug: string, submitOrganizerRatingDto: SubmitOrganizerRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizerRatingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCommandControllerRateOrganizer(slug, submitOrganizerRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a user for an event using event slug and username. Only authenticated users can register for events.
         * @summary Register for an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCommandControllerRegisterToEvent(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRegistrationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCommandControllerRegisterToEvent(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle event session for a user by RFID. Automatically checks if it is a check-in or check-out.
         * @summary Toggle event session (check-in/check-out)
         * @param {ToggleSessionDto} toggleSessionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCommandControllerToggleSession(toggleSessionDto: ToggleSessionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCommandControllerToggleSession(toggleSessionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an event. Only the event organizer can update the event.
         * @summary Update an event
         * @param {string} slug Event slug
         * @param {UpdateEventDto} updateEventDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCommandControllerUpdate(slug: string, updateEventDto: UpdateEventDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventUpdateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCommandControllerUpdate(slug, updateEventDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if the current user has already submitted feedback for a specific event.
         * @summary Check if user has submitted feedback for an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerCheckFeedbackResponse(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerCheckFeedbackResponse(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a paginated list of events with optional filtering by search term, tags, organizer, and pinned status.
         * @summary Get all events with filtering and pagination
         * @param {string} [search] Search in event title and description
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {string} [organizerSlug] Filter by event organizer username
         * @param {boolean} [pinned] Filter to show only pinned events
         * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerFindAll(search?: string, tags?: string, organizerSlug?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerFindAll(search, tags, organizerSlug, pinned, type, sortOrder, sortBy, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve detailed information about a specific event
         * @summary Get an event by slug
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerFindOne(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerFindOne(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all attendees for a specific event with their basic information and attendance stats.
         * @summary Get event attendees
         * @param {string} eventId Event ID
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerGetEventAttendees(eventId: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsQueryControllerGetEventAttendees200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerGetEventAttendees(eventId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all attendees and their sessions for a specific event. Requires authentication.
         * @summary Get event sessions by event slug
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerGetEventSessions(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerGetEventSessions(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve events that the current user has attended with filtering and pagination.
         * @summary Get events attended by current user
         * @param {string} [search] Search in event title and description
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {string} [organizerSlug] Filter by event organizer username
         * @param {boolean} [pinned] Filter to show only pinned events
         * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerGetMyAttendedEvents(search?: string, tags?: string, organizerSlug?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerGetMyAttendedEvents(search, tags, organizerSlug, pinned, type, sortOrder, sortBy, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve events that the current user has created with filtering and pagination.
         * @summary Get events created by current user
         * @param {string} [search] Search in event title and description
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {boolean} [pinned] Filter to show only pinned events
         * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerGetMyCreatedEvents(search?: string, tags?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerGetMyCreatedEvents(search, tags, pinned, type, sortOrder, sortBy, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve comprehensive statistics for an event organizer including total events, ratings, and recent events.
         * @summary Get organizer statistics
         * @param {string} username Username of the organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerGetOrganizerStatistics(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizerStatisticsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerGetOrganizerStatistics(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all events that are currently pinned (no pagination).
         * @summary Get all pinned events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsQueryControllerGetPinnedEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventDetailResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsQueryControllerGetPinnedEvents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Create a new event. Only authenticated users can create events.
         * @summary Create a new event
         * @param {EventsApiEventsCommandControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerCreate(requestParameters: EventsApiEventsCommandControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<EventCreateResponseDto> {
            return localVarFp.eventsCommandControllerCreate(requestParameters.createEventDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an event. Only the event organizer can delete the event.
         * @summary Delete an event
         * @param {EventsApiEventsCommandControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerDelete(requestParameters: EventsApiEventsCommandControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<EventDeleteResponseDto> {
            return localVarFp.eventsCommandControllerDelete(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a rating for the event organizer. Only eligible attendees can rate.
         * @summary Rate event organizer
         * @param {EventsApiEventsCommandControllerRateOrganizerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerRateOrganizer(requestParameters: EventsApiEventsCommandControllerRateOrganizerRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizerRatingResponseDto> {
            return localVarFp.eventsCommandControllerRateOrganizer(requestParameters.slug, requestParameters.submitOrganizerRatingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a user for an event using event slug and username. Only authenticated users can register for events.
         * @summary Register for an event
         * @param {EventsApiEventsCommandControllerRegisterToEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerRegisterToEvent(requestParameters: EventsApiEventsCommandControllerRegisterToEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventRegistrationResponseDto> {
            return localVarFp.eventsCommandControllerRegisterToEvent(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle event session for a user by RFID. Automatically checks if it is a check-in or check-out.
         * @summary Toggle event session (check-in/check-out)
         * @param {EventsApiEventsCommandControllerToggleSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerToggleSession(requestParameters: EventsApiEventsCommandControllerToggleSessionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventsCommandControllerToggleSession(requestParameters.toggleSessionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an event. Only the event organizer can update the event.
         * @summary Update an event
         * @param {EventsApiEventsCommandControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCommandControllerUpdate(requestParameters: EventsApiEventsCommandControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EventUpdateResponseDto> {
            return localVarFp.eventsCommandControllerUpdate(requestParameters.slug, requestParameters.updateEventDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if the current user has already submitted feedback for a specific event.
         * @summary Check if user has submitted feedback for an event
         * @param {EventsApiEventsQueryControllerCheckFeedbackResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerCheckFeedbackResponse(requestParameters: EventsApiEventsQueryControllerCheckFeedbackResponseRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackStatusResponseDto> {
            return localVarFp.eventsQueryControllerCheckFeedbackResponse(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of events with optional filtering by search term, tags, organizer, and pinned status.
         * @summary Get all events with filtering and pagination
         * @param {EventsApiEventsQueryControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerFindAll(requestParameters: EventsApiEventsQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EventListResponseDto> {
            return localVarFp.eventsQueryControllerFindAll(requestParameters.search, requestParameters.tags, requestParameters.organizerSlug, requestParameters.pinned, requestParameters.type, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific event
         * @summary Get an event by slug
         * @param {EventsApiEventsQueryControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerFindOne(requestParameters: EventsApiEventsQueryControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<EventDetailResponseDto> {
            return localVarFp.eventsQueryControllerFindOne(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all attendees for a specific event with their basic information and attendance stats.
         * @summary Get event attendees
         * @param {EventsApiEventsQueryControllerGetEventAttendeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetEventAttendees(requestParameters: EventsApiEventsQueryControllerGetEventAttendeesRequest, options?: AxiosRequestConfig): AxiosPromise<EventsQueryControllerGetEventAttendees200Response> {
            return localVarFp.eventsQueryControllerGetEventAttendees(requestParameters.eventId, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all attendees and their sessions for a specific event. Requires authentication.
         * @summary Get event sessions by event slug
         * @param {EventsApiEventsQueryControllerGetEventSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetEventSessions(requestParameters: EventsApiEventsQueryControllerGetEventSessionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventsQueryControllerGetEventSessions(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve events that the current user has attended with filtering and pagination.
         * @summary Get events attended by current user
         * @param {EventsApiEventsQueryControllerGetMyAttendedEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetMyAttendedEvents(requestParameters: EventsApiEventsQueryControllerGetMyAttendedEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EventListResponseDto> {
            return localVarFp.eventsQueryControllerGetMyAttendedEvents(requestParameters.search, requestParameters.tags, requestParameters.organizerSlug, requestParameters.pinned, requestParameters.type, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve events that the current user has created with filtering and pagination.
         * @summary Get events created by current user
         * @param {EventsApiEventsQueryControllerGetMyCreatedEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetMyCreatedEvents(requestParameters: EventsApiEventsQueryControllerGetMyCreatedEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EventListResponseDto> {
            return localVarFp.eventsQueryControllerGetMyCreatedEvents(requestParameters.search, requestParameters.tags, requestParameters.pinned, requestParameters.type, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve comprehensive statistics for an event organizer including total events, ratings, and recent events.
         * @summary Get organizer statistics
         * @param {EventsApiEventsQueryControllerGetOrganizerStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetOrganizerStatistics(requestParameters: EventsApiEventsQueryControllerGetOrganizerStatisticsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizerStatisticsResponseDto> {
            return localVarFp.eventsQueryControllerGetOrganizerStatistics(requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all events that are currently pinned (no pagination).
         * @summary Get all pinned events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsQueryControllerGetPinnedEvents(options?: AxiosRequestConfig): AxiosPromise<Array<EventDetailResponseDto>> {
            return localVarFp.eventsQueryControllerGetPinnedEvents(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * Create a new event. Only authenticated users can create events.
     * @summary Create a new event
     * @param {CreateEventDto} createEventDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCommandControllerCreate(createEventDto: CreateEventDto, options?: AxiosRequestConfig): AxiosPromise<EventCreateResponseDto>;

    /**
     * Delete an event. Only the event organizer can delete the event.
     * @summary Delete an event
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCommandControllerDelete(slug: string, options?: AxiosRequestConfig): AxiosPromise<EventDeleteResponseDto>;

    /**
     * Submit a rating for the event organizer. Only eligible attendees can rate.
     * @summary Rate event organizer
     * @param {string} slug Event slug
     * @param {SubmitOrganizerRatingDto} submitOrganizerRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCommandControllerRateOrganizer(slug: string, submitOrganizerRatingDto: SubmitOrganizerRatingDto, options?: AxiosRequestConfig): AxiosPromise<OrganizerRatingResponseDto>;

    /**
     * Register a user for an event using event slug and username. Only authenticated users can register for events.
     * @summary Register for an event
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCommandControllerRegisterToEvent(slug: string, options?: AxiosRequestConfig): AxiosPromise<EventRegistrationResponseDto>;

    /**
     * Toggle event session for a user by RFID. Automatically checks if it is a check-in or check-out.
     * @summary Toggle event session (check-in/check-out)
     * @param {ToggleSessionDto} toggleSessionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCommandControllerToggleSession(toggleSessionDto: ToggleSessionDto, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update an event. Only the event organizer can update the event.
     * @summary Update an event
     * @param {string} slug Event slug
     * @param {UpdateEventDto} updateEventDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCommandControllerUpdate(slug: string, updateEventDto: UpdateEventDto, options?: AxiosRequestConfig): AxiosPromise<EventUpdateResponseDto>;

    /**
     * Check if the current user has already submitted feedback for a specific event.
     * @summary Check if user has submitted feedback for an event
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerCheckFeedbackResponse(slug: string, options?: AxiosRequestConfig): AxiosPromise<FeedbackStatusResponseDto>;

    /**
     * Retrieve a paginated list of events with optional filtering by search term, tags, organizer, and pinned status.
     * @summary Get all events with filtering and pagination
     * @param {string} [search] Search in event title and description
     * @param {string} [tags] Comma-separated list of tags to filter by
     * @param {string} [organizerSlug] Filter by event organizer username
     * @param {boolean} [pinned] Filter to show only pinned events
     * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
     * @param {'asc' | 'desc'} [sortOrder] Sort direction
     * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerFindAll(search?: string, tags?: string, organizerSlug?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<EventListResponseDto>;

    /**
     * Retrieve detailed information about a specific event
     * @summary Get an event by slug
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerFindOne(slug: string, options?: AxiosRequestConfig): AxiosPromise<EventDetailResponseDto>;

    /**
     * Retrieve all attendees for a specific event with their basic information and attendance stats.
     * @summary Get event attendees
     * @param {string} eventId Event ID
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerGetEventAttendees(eventId: string, limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<EventsQueryControllerGetEventAttendees200Response>;

    /**
     * Retrieve all attendees and their sessions for a specific event. Requires authentication.
     * @summary Get event sessions by event slug
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerGetEventSessions(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve events that the current user has attended with filtering and pagination.
     * @summary Get events attended by current user
     * @param {string} [search] Search in event title and description
     * @param {string} [tags] Comma-separated list of tags to filter by
     * @param {string} [organizerSlug] Filter by event organizer username
     * @param {boolean} [pinned] Filter to show only pinned events
     * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
     * @param {'asc' | 'desc'} [sortOrder] Sort direction
     * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerGetMyAttendedEvents(search?: string, tags?: string, organizerSlug?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<EventListResponseDto>;

    /**
     * Retrieve events that the current user has created with filtering and pagination.
     * @summary Get events created by current user
     * @param {string} [search] Search in event title and description
     * @param {string} [tags] Comma-separated list of tags to filter by
     * @param {boolean} [pinned] Filter to show only pinned events
     * @param {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'} [type] Filter by event type
     * @param {'asc' | 'desc'} [sortOrder] Sort direction
     * @param {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'} [sortBy] Field to sort by
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerGetMyCreatedEvents(search?: string, tags?: string, pinned?: boolean, type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS', sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<EventListResponseDto>;

    /**
     * Retrieve comprehensive statistics for an event organizer including total events, ratings, and recent events.
     * @summary Get organizer statistics
     * @param {string} username Username of the organizer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerGetOrganizerStatistics(username: string, options?: AxiosRequestConfig): AxiosPromise<OrganizerStatisticsResponseDto>;

    /**
     * Retrieve all events that are currently pinned (no pagination).
     * @summary Get all pinned events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsQueryControllerGetPinnedEvents(options?: AxiosRequestConfig): AxiosPromise<Array<EventDetailResponseDto>>;

}

/**
 * Request parameters for eventsCommandControllerCreate operation in EventsApi.
 * @export
 * @interface EventsApiEventsCommandControllerCreateRequest
 */
export interface EventsApiEventsCommandControllerCreateRequest {
    /**
     * 
     * @type {CreateEventDto}
     * @memberof EventsApiEventsCommandControllerCreate
     */
    readonly createEventDto: CreateEventDto
}

/**
 * Request parameters for eventsCommandControllerDelete operation in EventsApi.
 * @export
 * @interface EventsApiEventsCommandControllerDeleteRequest
 */
export interface EventsApiEventsCommandControllerDeleteRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsCommandControllerDelete
     */
    readonly slug: string
}

/**
 * Request parameters for eventsCommandControllerRateOrganizer operation in EventsApi.
 * @export
 * @interface EventsApiEventsCommandControllerRateOrganizerRequest
 */
export interface EventsApiEventsCommandControllerRateOrganizerRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsCommandControllerRateOrganizer
     */
    readonly slug: string

    /**
     * 
     * @type {SubmitOrganizerRatingDto}
     * @memberof EventsApiEventsCommandControllerRateOrganizer
     */
    readonly submitOrganizerRatingDto: SubmitOrganizerRatingDto
}

/**
 * Request parameters for eventsCommandControllerRegisterToEvent operation in EventsApi.
 * @export
 * @interface EventsApiEventsCommandControllerRegisterToEventRequest
 */
export interface EventsApiEventsCommandControllerRegisterToEventRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsCommandControllerRegisterToEvent
     */
    readonly slug: string
}

/**
 * Request parameters for eventsCommandControllerToggleSession operation in EventsApi.
 * @export
 * @interface EventsApiEventsCommandControllerToggleSessionRequest
 */
export interface EventsApiEventsCommandControllerToggleSessionRequest {
    /**
     * 
     * @type {ToggleSessionDto}
     * @memberof EventsApiEventsCommandControllerToggleSession
     */
    readonly toggleSessionDto: ToggleSessionDto
}

/**
 * Request parameters for eventsCommandControllerUpdate operation in EventsApi.
 * @export
 * @interface EventsApiEventsCommandControllerUpdateRequest
 */
export interface EventsApiEventsCommandControllerUpdateRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsCommandControllerUpdate
     */
    readonly slug: string

    /**
     * 
     * @type {UpdateEventDto}
     * @memberof EventsApiEventsCommandControllerUpdate
     */
    readonly updateEventDto: UpdateEventDto
}

/**
 * Request parameters for eventsQueryControllerCheckFeedbackResponse operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerCheckFeedbackResponseRequest
 */
export interface EventsApiEventsQueryControllerCheckFeedbackResponseRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsQueryControllerCheckFeedbackResponse
     */
    readonly slug: string
}

/**
 * Request parameters for eventsQueryControllerFindAll operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerFindAllRequest
 */
export interface EventsApiEventsQueryControllerFindAllRequest {
    /**
     * Search in event title and description
     * @type {string}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly search?: string

    /**
     * Comma-separated list of tags to filter by
     * @type {string}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly tags?: string

    /**
     * Filter by event organizer username
     * @type {string}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly organizerSlug?: string

    /**
     * Filter to show only pinned events
     * @type {boolean}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly pinned?: boolean

    /**
     * Filter by event type
     * @type {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'

    /**
     * Sort direction
     * @type {'asc' | 'desc'}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly sortOrder?: 'asc' | 'desc'

    /**
     * Field to sort by
     * @type {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly limit?: number

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerFindAll
     */
    readonly page?: number
}

/**
 * Request parameters for eventsQueryControllerFindOne operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerFindOneRequest
 */
export interface EventsApiEventsQueryControllerFindOneRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsQueryControllerFindOne
     */
    readonly slug: string
}

/**
 * Request parameters for eventsQueryControllerGetEventAttendees operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerGetEventAttendeesRequest
 */
export interface EventsApiEventsQueryControllerGetEventAttendeesRequest {
    /**
     * Event ID
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetEventAttendees
     */
    readonly eventId: string

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerGetEventAttendees
     */
    readonly limit?: number

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerGetEventAttendees
     */
    readonly page?: number
}

/**
 * Request parameters for eventsQueryControllerGetEventSessions operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerGetEventSessionsRequest
 */
export interface EventsApiEventsQueryControllerGetEventSessionsRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetEventSessions
     */
    readonly slug: string
}

/**
 * Request parameters for eventsQueryControllerGetMyAttendedEvents operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerGetMyAttendedEventsRequest
 */
export interface EventsApiEventsQueryControllerGetMyAttendedEventsRequest {
    /**
     * Search in event title and description
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly search?: string

    /**
     * Comma-separated list of tags to filter by
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly tags?: string

    /**
     * Filter by event organizer username
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly organizerSlug?: string

    /**
     * Filter to show only pinned events
     * @type {boolean}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly pinned?: boolean

    /**
     * Filter by event type
     * @type {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'

    /**
     * Sort direction
     * @type {'asc' | 'desc'}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly sortOrder?: 'asc' | 'desc'

    /**
     * Field to sort by
     * @type {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly limit?: number

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerGetMyAttendedEvents
     */
    readonly page?: number
}

/**
 * Request parameters for eventsQueryControllerGetMyCreatedEvents operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerGetMyCreatedEventsRequest
 */
export interface EventsApiEventsQueryControllerGetMyCreatedEventsRequest {
    /**
     * Search in event title and description
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly search?: string

    /**
     * Comma-separated list of tags to filter by
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly tags?: string

    /**
     * Filter to show only pinned events
     * @type {boolean}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly pinned?: boolean

    /**
     * Filter by event type
     * @type {'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly type?: 'IN_PERSON' | 'VIRTUAL' | 'HYBRID' | 'OTHERS'

    /**
     * Sort direction
     * @type {'asc' | 'desc'}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly sortOrder?: 'asc' | 'desc'

    /**
     * Field to sort by
     * @type {'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly sortBy?: 'createdAt' | 'updatedAt' | 'startDate' | 'endDate' | 'title'

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly limit?: number

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof EventsApiEventsQueryControllerGetMyCreatedEvents
     */
    readonly page?: number
}

/**
 * Request parameters for eventsQueryControllerGetOrganizerStatistics operation in EventsApi.
 * @export
 * @interface EventsApiEventsQueryControllerGetOrganizerStatisticsRequest
 */
export interface EventsApiEventsQueryControllerGetOrganizerStatisticsRequest {
    /**
     * Username of the organizer
     * @type {string}
     * @memberof EventsApiEventsQueryControllerGetOrganizerStatistics
     */
    readonly username: string
}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * Create a new event. Only authenticated users can create events.
     * @summary Create a new event
     * @param {EventsApiEventsCommandControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCommandControllerCreate(requestParameters: EventsApiEventsCommandControllerCreateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCommandControllerCreate(requestParameters.createEventDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an event. Only the event organizer can delete the event.
     * @summary Delete an event
     * @param {EventsApiEventsCommandControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCommandControllerDelete(requestParameters: EventsApiEventsCommandControllerDeleteRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCommandControllerDelete(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a rating for the event organizer. Only eligible attendees can rate.
     * @summary Rate event organizer
     * @param {EventsApiEventsCommandControllerRateOrganizerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCommandControllerRateOrganizer(requestParameters: EventsApiEventsCommandControllerRateOrganizerRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCommandControllerRateOrganizer(requestParameters.slug, requestParameters.submitOrganizerRatingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a user for an event using event slug and username. Only authenticated users can register for events.
     * @summary Register for an event
     * @param {EventsApiEventsCommandControllerRegisterToEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCommandControllerRegisterToEvent(requestParameters: EventsApiEventsCommandControllerRegisterToEventRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCommandControllerRegisterToEvent(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle event session for a user by RFID. Automatically checks if it is a check-in or check-out.
     * @summary Toggle event session (check-in/check-out)
     * @param {EventsApiEventsCommandControllerToggleSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCommandControllerToggleSession(requestParameters: EventsApiEventsCommandControllerToggleSessionRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCommandControllerToggleSession(requestParameters.toggleSessionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an event. Only the event organizer can update the event.
     * @summary Update an event
     * @param {EventsApiEventsCommandControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCommandControllerUpdate(requestParameters: EventsApiEventsCommandControllerUpdateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCommandControllerUpdate(requestParameters.slug, requestParameters.updateEventDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if the current user has already submitted feedback for a specific event.
     * @summary Check if user has submitted feedback for an event
     * @param {EventsApiEventsQueryControllerCheckFeedbackResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerCheckFeedbackResponse(requestParameters: EventsApiEventsQueryControllerCheckFeedbackResponseRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerCheckFeedbackResponse(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of events with optional filtering by search term, tags, organizer, and pinned status.
     * @summary Get all events with filtering and pagination
     * @param {EventsApiEventsQueryControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerFindAll(requestParameters: EventsApiEventsQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerFindAll(requestParameters.search, requestParameters.tags, requestParameters.organizerSlug, requestParameters.pinned, requestParameters.type, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific event
     * @summary Get an event by slug
     * @param {EventsApiEventsQueryControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerFindOne(requestParameters: EventsApiEventsQueryControllerFindOneRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerFindOne(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all attendees for a specific event with their basic information and attendance stats.
     * @summary Get event attendees
     * @param {EventsApiEventsQueryControllerGetEventAttendeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerGetEventAttendees(requestParameters: EventsApiEventsQueryControllerGetEventAttendeesRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerGetEventAttendees(requestParameters.eventId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all attendees and their sessions for a specific event. Requires authentication.
     * @summary Get event sessions by event slug
     * @param {EventsApiEventsQueryControllerGetEventSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerGetEventSessions(requestParameters: EventsApiEventsQueryControllerGetEventSessionsRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerGetEventSessions(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve events that the current user has attended with filtering and pagination.
     * @summary Get events attended by current user
     * @param {EventsApiEventsQueryControllerGetMyAttendedEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerGetMyAttendedEvents(requestParameters: EventsApiEventsQueryControllerGetMyAttendedEventsRequest = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerGetMyAttendedEvents(requestParameters.search, requestParameters.tags, requestParameters.organizerSlug, requestParameters.pinned, requestParameters.type, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve events that the current user has created with filtering and pagination.
     * @summary Get events created by current user
     * @param {EventsApiEventsQueryControllerGetMyCreatedEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerGetMyCreatedEvents(requestParameters: EventsApiEventsQueryControllerGetMyCreatedEventsRequest = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerGetMyCreatedEvents(requestParameters.search, requestParameters.tags, requestParameters.pinned, requestParameters.type, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve comprehensive statistics for an event organizer including total events, ratings, and recent events.
     * @summary Get organizer statistics
     * @param {EventsApiEventsQueryControllerGetOrganizerStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerGetOrganizerStatistics(requestParameters: EventsApiEventsQueryControllerGetOrganizerStatisticsRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerGetOrganizerStatistics(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all events that are currently pinned (no pagination).
     * @summary Get all pinned events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsQueryControllerGetPinnedEvents(options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsQueryControllerGetPinnedEvents(options).then((request) => request(this.axios, this.basePath));
    }
}
