/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EventFeedbackResponsesDto } from '../models';
// @ts-ignore
import { EventPinResponseDto } from '../models';
// @ts-ignore
import { EventUnpinResponseDto } from '../models';
/**
 * EventsAdminApi - axios parameter creator
 * @export
 */
export const EventsAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all feedback responses for an event with statistics and insights. Only admins and staff can access this.
         * @summary Get event feedback responses
         * @param {string} slug Event slug
         * @param {number} [page] Page number (starting from 1)
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term to filter by username, first name, last name, or email
         * @param {'submittedAt' | 'username' | 'firstName' | 'lastName'} [sortBy] Field to sort by
         * @param {'asc' | 'desc'} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsAdminControllerGetEventFeedbackResponses: async (slug: string, page?: number, limit?: number, search?: string, sortBy?: 'submittedAt' | 'username' | 'firstName' | 'lastName', sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsAdminControllerGetEventFeedbackResponses', 'slug', slug)
            const localVarPath = `/api/admin/events/{slug}/feedback/responses`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pin an event to highlight it. Only admins can pin events.
         * @summary Pin an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsAdminControllerPinEvent: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsAdminControllerPinEvent', 'slug', slug)
            const localVarPath = `/api/admin/events/{slug}/pin`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unpin an event. Only admins can unpin events.
         * @summary Unpin an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsAdminControllerUnpinEvent: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventsAdminControllerUnpinEvent', 'slug', slug)
            const localVarPath = `/api/admin/events/{slug}/pin`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsAdminApi - functional programming interface
 * @export
 */
export const EventsAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all feedback responses for an event with statistics and insights. Only admins and staff can access this.
         * @summary Get event feedback responses
         * @param {string} slug Event slug
         * @param {number} [page] Page number (starting from 1)
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term to filter by username, first name, last name, or email
         * @param {'submittedAt' | 'username' | 'firstName' | 'lastName'} [sortBy] Field to sort by
         * @param {'asc' | 'desc'} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsAdminControllerGetEventFeedbackResponses(slug: string, page?: number, limit?: number, search?: string, sortBy?: 'submittedAt' | 'username' | 'firstName' | 'lastName', sortOrder?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventFeedbackResponsesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsAdminControllerGetEventFeedbackResponses(slug, page, limit, search, sortBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pin an event to highlight it. Only admins can pin events.
         * @summary Pin an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsAdminControllerPinEvent(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventPinResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsAdminControllerPinEvent(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unpin an event. Only admins can unpin events.
         * @summary Unpin an event
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsAdminControllerUnpinEvent(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventUnpinResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsAdminControllerUnpinEvent(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsAdminApi - factory interface
 * @export
 */
export const EventsAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsAdminApiFp(configuration)
    return {
        /**
         * Get all feedback responses for an event with statistics and insights. Only admins and staff can access this.
         * @summary Get event feedback responses
         * @param {EventsAdminApiEventsAdminControllerGetEventFeedbackResponsesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsAdminControllerGetEventFeedbackResponses(requestParameters: EventsAdminApiEventsAdminControllerGetEventFeedbackResponsesRequest, options?: AxiosRequestConfig): AxiosPromise<EventFeedbackResponsesDto> {
            return localVarFp.eventsAdminControllerGetEventFeedbackResponses(requestParameters.slug, requestParameters.page, requestParameters.limit, requestParameters.search, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Pin an event to highlight it. Only admins can pin events.
         * @summary Pin an event
         * @param {EventsAdminApiEventsAdminControllerPinEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsAdminControllerPinEvent(requestParameters: EventsAdminApiEventsAdminControllerPinEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventPinResponseDto> {
            return localVarFp.eventsAdminControllerPinEvent(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Unpin an event. Only admins can unpin events.
         * @summary Unpin an event
         * @param {EventsAdminApiEventsAdminControllerUnpinEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsAdminControllerUnpinEvent(requestParameters: EventsAdminApiEventsAdminControllerUnpinEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventUnpinResponseDto> {
            return localVarFp.eventsAdminControllerUnpinEvent(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsAdminApi - interface
 * @export
 * @interface EventsAdminApi
 */
export interface EventsAdminApiInterface {
    /**
     * Get all feedback responses for an event with statistics and insights. Only admins and staff can access this.
     * @summary Get event feedback responses
     * @param {string} slug Event slug
     * @param {number} [page] Page number (starting from 1)
     * @param {number} [limit] Number of items per page
     * @param {string} [search] Search term to filter by username, first name, last name, or email
     * @param {'submittedAt' | 'username' | 'firstName' | 'lastName'} [sortBy] Field to sort by
     * @param {'asc' | 'desc'} [sortOrder] Sort order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsAdminApiInterface
     */
    eventsAdminControllerGetEventFeedbackResponses(slug: string, page?: number, limit?: number, search?: string, sortBy?: 'submittedAt' | 'username' | 'firstName' | 'lastName', sortOrder?: 'asc' | 'desc', options?: AxiosRequestConfig): AxiosPromise<EventFeedbackResponsesDto>;

    /**
     * Pin an event to highlight it. Only admins can pin events.
     * @summary Pin an event
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsAdminApiInterface
     */
    eventsAdminControllerPinEvent(slug: string, options?: AxiosRequestConfig): AxiosPromise<EventPinResponseDto>;

    /**
     * Unpin an event. Only admins can unpin events.
     * @summary Unpin an event
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsAdminApiInterface
     */
    eventsAdminControllerUnpinEvent(slug: string, options?: AxiosRequestConfig): AxiosPromise<EventUnpinResponseDto>;

}

/**
 * Request parameters for eventsAdminControllerGetEventFeedbackResponses operation in EventsAdminApi.
 * @export
 * @interface EventsAdminApiEventsAdminControllerGetEventFeedbackResponsesRequest
 */
export interface EventsAdminApiEventsAdminControllerGetEventFeedbackResponsesRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsAdminApiEventsAdminControllerGetEventFeedbackResponses
     */
    readonly slug: string

    /**
     * Page number (starting from 1)
     * @type {number}
     * @memberof EventsAdminApiEventsAdminControllerGetEventFeedbackResponses
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof EventsAdminApiEventsAdminControllerGetEventFeedbackResponses
     */
    readonly limit?: number

    /**
     * Search term to filter by username, first name, last name, or email
     * @type {string}
     * @memberof EventsAdminApiEventsAdminControllerGetEventFeedbackResponses
     */
    readonly search?: string

    /**
     * Field to sort by
     * @type {'submittedAt' | 'username' | 'firstName' | 'lastName'}
     * @memberof EventsAdminApiEventsAdminControllerGetEventFeedbackResponses
     */
    readonly sortBy?: 'submittedAt' | 'username' | 'firstName' | 'lastName'

    /**
     * Sort order
     * @type {'asc' | 'desc'}
     * @memberof EventsAdminApiEventsAdminControllerGetEventFeedbackResponses
     */
    readonly sortOrder?: 'asc' | 'desc'
}

/**
 * Request parameters for eventsAdminControllerPinEvent operation in EventsAdminApi.
 * @export
 * @interface EventsAdminApiEventsAdminControllerPinEventRequest
 */
export interface EventsAdminApiEventsAdminControllerPinEventRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsAdminApiEventsAdminControllerPinEvent
     */
    readonly slug: string
}

/**
 * Request parameters for eventsAdminControllerUnpinEvent operation in EventsAdminApi.
 * @export
 * @interface EventsAdminApiEventsAdminControllerUnpinEventRequest
 */
export interface EventsAdminApiEventsAdminControllerUnpinEventRequest {
    /**
     * Event slug
     * @type {string}
     * @memberof EventsAdminApiEventsAdminControllerUnpinEvent
     */
    readonly slug: string
}

/**
 * EventsAdminApi - object-oriented interface
 * @export
 * @class EventsAdminApi
 * @extends {BaseAPI}
 */
export class EventsAdminApi extends BaseAPI implements EventsAdminApiInterface {
    /**
     * Get all feedback responses for an event with statistics and insights. Only admins and staff can access this.
     * @summary Get event feedback responses
     * @param {EventsAdminApiEventsAdminControllerGetEventFeedbackResponsesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsAdminApi
     */
    public eventsAdminControllerGetEventFeedbackResponses(requestParameters: EventsAdminApiEventsAdminControllerGetEventFeedbackResponsesRequest, options?: AxiosRequestConfig) {
        return EventsAdminApiFp(this.configuration).eventsAdminControllerGetEventFeedbackResponses(requestParameters.slug, requestParameters.page, requestParameters.limit, requestParameters.search, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pin an event to highlight it. Only admins can pin events.
     * @summary Pin an event
     * @param {EventsAdminApiEventsAdminControllerPinEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsAdminApi
     */
    public eventsAdminControllerPinEvent(requestParameters: EventsAdminApiEventsAdminControllerPinEventRequest, options?: AxiosRequestConfig) {
        return EventsAdminApiFp(this.configuration).eventsAdminControllerPinEvent(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unpin an event. Only admins can unpin events.
     * @summary Unpin an event
     * @param {EventsAdminApiEventsAdminControllerUnpinEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsAdminApi
     */
    public eventsAdminControllerUnpinEvent(requestParameters: EventsAdminApiEventsAdminControllerUnpinEventRequest, options?: AxiosRequestConfig) {
        return EventsAdminApiFp(this.configuration).eventsAdminControllerUnpinEvent(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
}
