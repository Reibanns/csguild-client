/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModerateBlogDto } from '../models';
// @ts-ignore
import { ModerationActionResponseDto } from '../models';
// @ts-ignore
import { ModerationQueueResponseDto } from '../models';
/**
 * BlogModerationApi - axios parameter creator
 * @export
 */
export const BlogModerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get paginated list of blogs and comments requiring moderation
         * @summary Get moderation queue
         * @param {string} page 
         * @param {string} limit 
         * @param {string} type 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogModerationControllerGetModerationQueue: async (page: string, limit: string, type: string, status: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('blogModerationControllerGetModerationQueue', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('blogModerationControllerGetModerationQueue', 'limit', limit)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('blogModerationControllerGetModerationQueue', 'type', type)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('blogModerationControllerGetModerationQueue', 'status', status)
            const localVarPath = `/api/blog-moderation/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Moderate a blog post (admin/moderator only)
         * @summary Moderate a blog
         * @param {string} slug Blog slug
         * @param {ModerateBlogDto} moderateBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogModerationControllerModerateBlog: async (slug: string, moderateBlogDto: ModerateBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('blogModerationControllerModerateBlog', 'slug', slug)
            // verify required parameter 'moderateBlogDto' is not null or undefined
            assertParamExists('blogModerationControllerModerateBlog', 'moderateBlogDto', moderateBlogDto)
            const localVarPath = `/api/blog-moderation/blogs/{slug}/moderate`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moderateBlogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Moderate a comment (admin/moderator only)
         * @summary Moderate a comment
         * @param {string} commentId Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogModerationControllerModerateComment: async (commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('blogModerationControllerModerateComment', 'commentId', commentId)
            const localVarPath = `/api/blog-moderation/comments/{commentId}/moderate`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogModerationApi - functional programming interface
 * @export
 */
export const BlogModerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogModerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get paginated list of blogs and comments requiring moderation
         * @summary Get moderation queue
         * @param {string} page 
         * @param {string} limit 
         * @param {string} type 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogModerationControllerGetModerationQueue(page: string, limit: string, type: string, status: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModerationQueueResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogModerationControllerGetModerationQueue(page, limit, type, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Moderate a blog post (admin/moderator only)
         * @summary Moderate a blog
         * @param {string} slug Blog slug
         * @param {ModerateBlogDto} moderateBlogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogModerationControllerModerateBlog(slug: string, moderateBlogDto: ModerateBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModerationActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogModerationControllerModerateBlog(slug, moderateBlogDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Moderate a comment (admin/moderator only)
         * @summary Moderate a comment
         * @param {string} commentId Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogModerationControllerModerateComment(commentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModerationActionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogModerationControllerModerateComment(commentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogModerationApi - factory interface
 * @export
 */
export const BlogModerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogModerationApiFp(configuration)
    return {
        /**
         * Get paginated list of blogs and comments requiring moderation
         * @summary Get moderation queue
         * @param {BlogModerationApiBlogModerationControllerGetModerationQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogModerationControllerGetModerationQueue(requestParameters: BlogModerationApiBlogModerationControllerGetModerationQueueRequest, options?: AxiosRequestConfig): AxiosPromise<ModerationQueueResponseDto> {
            return localVarFp.blogModerationControllerGetModerationQueue(requestParameters.page, requestParameters.limit, requestParameters.type, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * Moderate a blog post (admin/moderator only)
         * @summary Moderate a blog
         * @param {BlogModerationApiBlogModerationControllerModerateBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogModerationControllerModerateBlog(requestParameters: BlogModerationApiBlogModerationControllerModerateBlogRequest, options?: AxiosRequestConfig): AxiosPromise<ModerationActionResponseDto> {
            return localVarFp.blogModerationControllerModerateBlog(requestParameters.slug, requestParameters.moderateBlogDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Moderate a comment (admin/moderator only)
         * @summary Moderate a comment
         * @param {BlogModerationApiBlogModerationControllerModerateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogModerationControllerModerateComment(requestParameters: BlogModerationApiBlogModerationControllerModerateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<ModerationActionResponseDto> {
            return localVarFp.blogModerationControllerModerateComment(requestParameters.commentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogModerationApi - interface
 * @export
 * @interface BlogModerationApi
 */
export interface BlogModerationApiInterface {
    /**
     * Get paginated list of blogs and comments requiring moderation
     * @summary Get moderation queue
     * @param {string} page 
     * @param {string} limit 
     * @param {string} type 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogModerationApiInterface
     */
    blogModerationControllerGetModerationQueue(page: string, limit: string, type: string, status: string, options?: AxiosRequestConfig): AxiosPromise<ModerationQueueResponseDto>;

    /**
     * Moderate a blog post (admin/moderator only)
     * @summary Moderate a blog
     * @param {string} slug Blog slug
     * @param {ModerateBlogDto} moderateBlogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogModerationApiInterface
     */
    blogModerationControllerModerateBlog(slug: string, moderateBlogDto: ModerateBlogDto, options?: AxiosRequestConfig): AxiosPromise<ModerationActionResponseDto>;

    /**
     * Moderate a comment (admin/moderator only)
     * @summary Moderate a comment
     * @param {string} commentId Comment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogModerationApiInterface
     */
    blogModerationControllerModerateComment(commentId: string, options?: AxiosRequestConfig): AxiosPromise<ModerationActionResponseDto>;

}

/**
 * Request parameters for blogModerationControllerGetModerationQueue operation in BlogModerationApi.
 * @export
 * @interface BlogModerationApiBlogModerationControllerGetModerationQueueRequest
 */
export interface BlogModerationApiBlogModerationControllerGetModerationQueueRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogModerationApiBlogModerationControllerGetModerationQueue
     */
    readonly page: string

    /**
     * 
     * @type {string}
     * @memberof BlogModerationApiBlogModerationControllerGetModerationQueue
     */
    readonly limit: string

    /**
     * 
     * @type {string}
     * @memberof BlogModerationApiBlogModerationControllerGetModerationQueue
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof BlogModerationApiBlogModerationControllerGetModerationQueue
     */
    readonly status: string
}

/**
 * Request parameters for blogModerationControllerModerateBlog operation in BlogModerationApi.
 * @export
 * @interface BlogModerationApiBlogModerationControllerModerateBlogRequest
 */
export interface BlogModerationApiBlogModerationControllerModerateBlogRequest {
    /**
     * Blog slug
     * @type {string}
     * @memberof BlogModerationApiBlogModerationControllerModerateBlog
     */
    readonly slug: string

    /**
     * 
     * @type {ModerateBlogDto}
     * @memberof BlogModerationApiBlogModerationControllerModerateBlog
     */
    readonly moderateBlogDto: ModerateBlogDto
}

/**
 * Request parameters for blogModerationControllerModerateComment operation in BlogModerationApi.
 * @export
 * @interface BlogModerationApiBlogModerationControllerModerateCommentRequest
 */
export interface BlogModerationApiBlogModerationControllerModerateCommentRequest {
    /**
     * Comment ID
     * @type {string}
     * @memberof BlogModerationApiBlogModerationControllerModerateComment
     */
    readonly commentId: string
}

/**
 * BlogModerationApi - object-oriented interface
 * @export
 * @class BlogModerationApi
 * @extends {BaseAPI}
 */
export class BlogModerationApi extends BaseAPI implements BlogModerationApiInterface {
    /**
     * Get paginated list of blogs and comments requiring moderation
     * @summary Get moderation queue
     * @param {BlogModerationApiBlogModerationControllerGetModerationQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogModerationApi
     */
    public blogModerationControllerGetModerationQueue(requestParameters: BlogModerationApiBlogModerationControllerGetModerationQueueRequest, options?: AxiosRequestConfig) {
        return BlogModerationApiFp(this.configuration).blogModerationControllerGetModerationQueue(requestParameters.page, requestParameters.limit, requestParameters.type, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Moderate a blog post (admin/moderator only)
     * @summary Moderate a blog
     * @param {BlogModerationApiBlogModerationControllerModerateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogModerationApi
     */
    public blogModerationControllerModerateBlog(requestParameters: BlogModerationApiBlogModerationControllerModerateBlogRequest, options?: AxiosRequestConfig) {
        return BlogModerationApiFp(this.configuration).blogModerationControllerModerateBlog(requestParameters.slug, requestParameters.moderateBlogDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Moderate a comment (admin/moderator only)
     * @summary Moderate a comment
     * @param {BlogModerationApiBlogModerationControllerModerateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogModerationApi
     */
    public blogModerationControllerModerateComment(requestParameters: BlogModerationApiBlogModerationControllerModerateCommentRequest, options?: AxiosRequestConfig) {
        return BlogModerationApiFp(this.configuration).blogModerationControllerModerateComment(requestParameters.commentId, options).then((request) => request(this.axios, this.basePath));
    }
}
